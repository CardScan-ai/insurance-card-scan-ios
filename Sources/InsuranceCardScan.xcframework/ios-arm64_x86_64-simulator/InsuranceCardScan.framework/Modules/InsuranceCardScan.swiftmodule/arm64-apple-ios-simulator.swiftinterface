// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name InsuranceCardScan
import Foundation
@_exported import InsuranceCardScan
import MobileCoreServices
import Swift
import UIKit
import UniformTypeIdentifiers
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct ScanMetadataCaptureScore : Swift.Codable, Swift.Hashable {
  public var scores: [InsuranceCardScan.ScanMetadataCaptureScoreScoresInner]?
  public var maxLapScore: Swift.Double?
  public init(scores: [InsuranceCardScan.ScanMetadataCaptureScoreScoresInner]? = nil, maxLapScore: Swift.Double? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case scores
    case maxLapScore
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.ScanMetadataCaptureScore.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.ScanMetadataCaptureScore.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.ScanMetadataCaptureScore, b: InsuranceCardScan.ScanMetadataCaptureScore) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct ScanMetadataCaptureCanvas : Swift.Codable, Swift.Hashable {
  public var width: Swift.Int?
  public var height: Swift.Int?
  public init(width: Swift.Int? = nil, height: Swift.Int? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case width
    case height
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.ScanMetadataCaptureCanvas.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.ScanMetadataCaptureCanvas.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.ScanMetadataCaptureCanvas, b: InsuranceCardScan.ScanMetadataCaptureCanvas) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public typealias InsuranceCard = InsuranceCardScan.CardApiResponse
public struct AddressResultInner : Swift.Codable, Swift.Hashable {
  public var value: Swift.String?
  public var scores: [Swift.String]?
  public var type: InsuranceCardScan.AddressType?
  public var label: Swift.String?
  public init(value: Swift.String? = nil, scores: [Swift.String]? = nil, type: InsuranceCardScan.AddressType? = nil, label: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case value
    case scores
    case type
    case label
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.AddressResultInner.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.AddressResultInner.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.AddressResultInner, b: InsuranceCardScan.AddressResultInner) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct ValidateMagicLink200Response : Swift.Codable, Swift.Hashable {
  public var token: Swift.String
  public var identityId: Swift.String
  public init(token: Swift.String, identityId: Swift.String)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case token
    case identityId
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.ValidateMagicLink200Response.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.ValidateMagicLink200Response.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.ValidateMagicLink200Response, b: InsuranceCardScan.ValidateMagicLink200Response) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public func getBridgeDecoder() -> Foundation.JSONDecoder
public struct WebhookEligibilityCompletedEvent : Swift.Codable, Swift.Hashable {
  public var eligibilityId: Foundation.UUID
  public var cardId: Foundation.UUID
  public var createdAt: Foundation.Date
  public var deleted: Swift.Bool
  public var sessionId: Swift.String
  public var type: Swift.String
  public var updatedAt: Foundation.Date
  public var userId: Swift.String
  public init(eligibilityId: Foundation.UUID, cardId: Foundation.UUID, createdAt: Foundation.Date, deleted: Swift.Bool, sessionId: Swift.String, type: Swift.String, updatedAt: Foundation.Date, userId: Swift.String)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case eligibilityId
    case cardId
    case createdAt
    case deleted
    case sessionId
    case type
    case updatedAt
    case userId
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.WebhookEligibilityCompletedEvent.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.WebhookEligibilityCompletedEvent.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.WebhookEligibilityCompletedEvent, b: InsuranceCardScan.WebhookEligibilityCompletedEvent) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct JSONDataEncoding {
  public func encode(_ urlRequest: Foundation.URLRequest, with parameters: [Swift.String : Any]?) -> Foundation.URLRequest
  public static func encodingParameters(jsonData: Foundation.Data?) -> [Swift.String : Any]?
}
public struct EligibilitySummarizedResponse : Swift.Codable, Swift.Hashable {
  public var errors: [InsuranceCardScan.EligibilityError]?
  public var subscriberDetails: InsuranceCardScan.SubscriberDetails?
  public var payerDetails: InsuranceCardScan.PayerDetails?
  public var planDetails: InsuranceCardScan.PlanDetails?
  public var coverageSummary: InsuranceCardScan.CoverageSummary?
  public var abortion: InsuranceCardScan.Service?
  public var acupuncture: InsuranceCardScan.Service?
  public var adjunctiveDentalServices: InsuranceCardScan.Service?
  public var aids: InsuranceCardScan.Service?
  public var airTransportation: InsuranceCardScan.Service?
  public var alcoholism: InsuranceCardScan.Service?
  public var allergy: InsuranceCardScan.Service?
  public var allergyTesting: InsuranceCardScan.Service?
  public var alternateMethodDialysis: InsuranceCardScan.Service?
  public var ambulatoryServiceCenterFacility: InsuranceCardScan.Service?
  public var anesthesia: InsuranceCardScan.Service?
  public var anesthesiologist: InsuranceCardScan.Service?
  public var audiologyExam: InsuranceCardScan.Service?
  public var bloodCharges: InsuranceCardScan.Service?
  public var brandNamePrescriptionDrug: InsuranceCardScan.Service?
  public var brandNamePrescriptionDrugFormulary: InsuranceCardScan.Service?
  public var brandNamePrescriptionDrugNonFormulary: InsuranceCardScan.Service?
  public var burnCare: InsuranceCardScan.Service?
  public var cabulance: InsuranceCardScan.Service?
  public var cancer: InsuranceCardScan.Service?
  public var cardiac: InsuranceCardScan.Service?
  public var cardiacRehabilitation: InsuranceCardScan.Service?
  public var caseManagement: InsuranceCardScan.Service?
  public var chemotherapy: InsuranceCardScan.Service?
  public var chiropractic: InsuranceCardScan.Service?
  public var chiropracticOfficeVisits: InsuranceCardScan.Service?
  public var chronicRenalDiseaseCrdEquipment: InsuranceCardScan.Service?
  public var cognitiveTherapy: InsuranceCardScan.Service?
  public var consultation: InsuranceCardScan.Service?
  public var coronaryCare: InsuranceCardScan.Service?
  public var dayCarePsychiatric: InsuranceCardScan.Service?
  public var dentalAccident: InsuranceCardScan.Service?
  public var dentalCare: InsuranceCardScan.Service?
  public var dentalCrowns: InsuranceCardScan.Service?
  public var dermatology: InsuranceCardScan.Service?
  public var diabeticSupplies: InsuranceCardScan.Service?
  public var diagnosticDental: InsuranceCardScan.Service?
  public var diagnosticLab: InsuranceCardScan.Service?
  public var diagnosticMedical: InsuranceCardScan.Service?
  public var diagnosticXRay: InsuranceCardScan.Service?
  public var dialysis: InsuranceCardScan.Service?
  public var donorProcedures: InsuranceCardScan.Service?
  public var drugAddiction: InsuranceCardScan.Service?
  public var durableMedicalEquipment: InsuranceCardScan.Service?
  public var durableMedicalEquipmentPurchase: InsuranceCardScan.Service?
  public var durableMedicalEquipmentRental: InsuranceCardScan.Service?
  public var emergencyRoom: InsuranceCardScan.Service?
  public var endocrine: InsuranceCardScan.Service?
  public var endodontics: InsuranceCardScan.Service?
  public var experimentalDrugTherapy: InsuranceCardScan.Service?
  public var eye: InsuranceCardScan.Service?
  public var eyewearAndEyewearAccessories: InsuranceCardScan.Service?
  public var familyPlanning: InsuranceCardScan.Service?
  public var fluVaccination: InsuranceCardScan.Service?
  public var frames: InsuranceCardScan.Service?
  public var freeStandingPrescriptionDrug: InsuranceCardScan.Service?
  public var gastrointestinal: InsuranceCardScan.Service?
  public var generalBenefits: InsuranceCardScan.Service?
  public var genericPrescriptionDrug: InsuranceCardScan.Service?
  public var genericPrescriptionDrugFormulary: InsuranceCardScan.Service?
  public var genericPrescriptionDrugNonFormulary: InsuranceCardScan.Service?
  public var gynecological: InsuranceCardScan.Service?
  public var homeHealthCare: InsuranceCardScan.Service?
  public var homeHealthPrescriptions: InsuranceCardScan.Service?
  public var homeHealthVisits: InsuranceCardScan.Service?
  public var hospice: InsuranceCardScan.Service?
  public var hospitalInpatient: InsuranceCardScan.Service?
  public var hospitalAmbulatorySurgical: InsuranceCardScan.Service?
  public var hospitalEmergencyAccident: InsuranceCardScan.Service?
  public var hospitalEmergencyMedical: InsuranceCardScan.Service?
  public var hospitalOutpatient: InsuranceCardScan.Service?
  public var hospitalRoomAndBoard: InsuranceCardScan.Service?
  public var immunizations: InsuranceCardScan.Service?
  public var inVitroFertilization: InsuranceCardScan.Service?
  public var independentMedicalEvaluation: InsuranceCardScan.Service?
  public var infertility: InsuranceCardScan.Service?
  public var inhalationTherapy: InsuranceCardScan.Service?
  public var intensiveCare: InsuranceCardScan.Service?
  public var invasiveProcedures: InsuranceCardScan.Service?
  public var lenses: InsuranceCardScan.Service?
  public var licensedAmbulance: InsuranceCardScan.Service?
  public var longTermCare: InsuranceCardScan.Service?
  public var lymphatic: InsuranceCardScan.Service?
  public var mailOrderPrescriptionDrug: InsuranceCardScan.Service?
  public var mailOrderPrescriptionDrugBrandName: InsuranceCardScan.Service?
  public var mailOrderPrescriptionDrugGeneric: InsuranceCardScan.Service?
  public var majorMedical: InsuranceCardScan.Service?
  public var mammogramHighRiskPatient: InsuranceCardScan.Service?
  public var mammogramLowRiskPatient: InsuranceCardScan.Service?
  public var massageTherapy: InsuranceCardScan.Service?
  public var maternity: InsuranceCardScan.Service?
  public var maxillofacialProsthetics: InsuranceCardScan.Service?
  public var medicalCare: InsuranceCardScan.Service?
  public var medicallyRelatedTransportation: InsuranceCardScan.Service?
  public var mentalHealth: InsuranceCardScan.Service?
  public var mentalHealthFacilityInpatient: InsuranceCardScan.Service?
  public var mentalHealthFacilityOutpatient: InsuranceCardScan.Service?
  public var mentalHealthProviderInpatient: InsuranceCardScan.Service?
  public var mentalHealthProviderOutpatient: InsuranceCardScan.Service?
  public var mriCatScan: InsuranceCardScan.Service?
  public var neonatalIntensiveCare: InsuranceCardScan.Service?
  public var neurology: InsuranceCardScan.Service?
  public var newbornCare: InsuranceCardScan.Service?
  public var nonmedicallyNecessaryPhysical: InsuranceCardScan.Service?
  public var nursery: InsuranceCardScan.Service?
  public var obstetrical: InsuranceCardScan.Service?
  public var obstetricalGynecological: InsuranceCardScan.Service?
  public var occupationalTherapy: InsuranceCardScan.Service?
  public var oncology: InsuranceCardScan.Service?
  public var oralSurgery: InsuranceCardScan.Service?
  public var orthodontics: InsuranceCardScan.Service?
  public var orthopedic: InsuranceCardScan.Service?
  public var otherMedical: InsuranceCardScan.Service?
  public var otologicalExam: InsuranceCardScan.Service?
  public var partialHospitalizationPsychiatric: InsuranceCardScan.Service?
  public var pathology: InsuranceCardScan.Service?
  public var pediatric: InsuranceCardScan.Service?
  public var periodontics: InsuranceCardScan.Service?
  public var pharmacy: InsuranceCardScan.Service?
  public var physicalMedicine: InsuranceCardScan.Service?
  public var physicalTherapy: InsuranceCardScan.Service?
  public var physicianVisitOfficeSick: InsuranceCardScan.Service?
  public var physicianVisitOfficeWell: InsuranceCardScan.Service?
  public var planWaitingPeriod: InsuranceCardScan.Service?
  public var pneumoniaVaccine: InsuranceCardScan.Service?
  public var podiatry: InsuranceCardScan.Service?
  public var podiatryNursingHomeVisits: InsuranceCardScan.Service?
  public var podiatryOfficeVisits: InsuranceCardScan.Service?
  public var preAdmissionTesting: InsuranceCardScan.Service?
  public var privateDutyNursing: InsuranceCardScan.Service?
  public var privateDutyNursingHome: InsuranceCardScan.Service?
  public var privateDutyNursingInpatient: InsuranceCardScan.Service?
  public var professionalPhysician: InsuranceCardScan.Service?
  public var professionalPhysicianVisitHome: InsuranceCardScan.Service?
  public var professionalPhysicianVisitInpatient: InsuranceCardScan.Service?
  public var professionalPhysicianVisitNursingHome: InsuranceCardScan.Service?
  public var officeVisit: InsuranceCardScan.Service?
  public var professionalPhysicianVisitOutpatient: InsuranceCardScan.Service?
  public var professionalPhysicianVisitSkilledNursing: InsuranceCardScan.Service?
  public var prostheticDevice: InsuranceCardScan.Service?
  public var prosthodontics: InsuranceCardScan.Service?
  public var psychiatric: InsuranceCardScan.Service?
  public var psychiatricInpatient: InsuranceCardScan.Service?
  public var psychiatricOutpatient: InsuranceCardScan.Service?
  public var psychiatricRoomAndBoard: InsuranceCardScan.Service?
  public var psychotherapy: InsuranceCardScan.Service?
  public var pulmonary: InsuranceCardScan.Service?
  public var pulmonaryRehabilitation: InsuranceCardScan.Service?
  public var radiationTherapy: InsuranceCardScan.Service?
  public var rehabilitation: InsuranceCardScan.Service?
  public var rehabilitationInpatient: InsuranceCardScan.Service?
  public var rehabilitationOutpatient: InsuranceCardScan.Service?
  public var rehabilitationRoomAndBoard: InsuranceCardScan.Service?
  public var renal: InsuranceCardScan.Service?
  public var renalSuppliesInTheHome: InsuranceCardScan.Service?
  public var residentialPsychiatricTreatment: InsuranceCardScan.Service?
  public var respiteCare: InsuranceCardScan.Service?
  public var restorative: InsuranceCardScan.Service?
  public var routinePreventiveDental: InsuranceCardScan.Service?
  public var routineExamUseForRoutineVisionExamOnly: InsuranceCardScan.Service?
  public var routinePhysical: InsuranceCardScan.Service?
  public var screeningLaboratory: InsuranceCardScan.Service?
  public var screeningXRay: InsuranceCardScan.Service?
  public var secondSurgicalOpinion: InsuranceCardScan.Service?
  public var skilledNursingCare: InsuranceCardScan.Service?
  public var skilledNursingCareRoomAndBoard: InsuranceCardScan.Service?
  public var skin: InsuranceCardScan.Service?
  public var smokingCessation: InsuranceCardScan.Service?
  public var socialWork: InsuranceCardScan.Service?
  public var speechTherapy: InsuranceCardScan.Service?
  public var substanceAbuse: InsuranceCardScan.Service?
  public var substanceAbuseFacilityInpatient: InsuranceCardScan.Service?
  public var substanceAbuseFacilityOutpatient: InsuranceCardScan.Service?
  public var substanceAbuseProviderInpatient: InsuranceCardScan.Service?
  public var substanceAbuseProviderOutpatient: InsuranceCardScan.Service?
  public var surgical: InsuranceCardScan.Service?
  public var surgicalAssistance: InsuranceCardScan.Service?
  public var surgicalBenefitsFacility: InsuranceCardScan.Service?
  public var surgicalBenefitsProfessionalPhysician: InsuranceCardScan.Service?
  public var thirdSurgicalOpinion: InsuranceCardScan.Service?
  public var transitionalCare: InsuranceCardScan.Service?
  public var transitionalNurseryCare: InsuranceCardScan.Service?
  public var transplants: InsuranceCardScan.Service?
  public var urgentCare: InsuranceCardScan.Service?
  public var usedDurableMedicalEquipment: InsuranceCardScan.Service?
  public var vision: InsuranceCardScan.Service?
  public var wellBabyCare: InsuranceCardScan.Service?
  public init(errors: [InsuranceCardScan.EligibilityError]? = nil, subscriberDetails: InsuranceCardScan.SubscriberDetails? = nil, payerDetails: InsuranceCardScan.PayerDetails? = nil, planDetails: InsuranceCardScan.PlanDetails? = nil, coverageSummary: InsuranceCardScan.CoverageSummary? = nil, abortion: InsuranceCardScan.Service? = nil, acupuncture: InsuranceCardScan.Service? = nil, adjunctiveDentalServices: InsuranceCardScan.Service? = nil, aids: InsuranceCardScan.Service? = nil, airTransportation: InsuranceCardScan.Service? = nil, alcoholism: InsuranceCardScan.Service? = nil, allergy: InsuranceCardScan.Service? = nil, allergyTesting: InsuranceCardScan.Service? = nil, alternateMethodDialysis: InsuranceCardScan.Service? = nil, ambulatoryServiceCenterFacility: InsuranceCardScan.Service? = nil, anesthesia: InsuranceCardScan.Service? = nil, anesthesiologist: InsuranceCardScan.Service? = nil, audiologyExam: InsuranceCardScan.Service? = nil, bloodCharges: InsuranceCardScan.Service? = nil, brandNamePrescriptionDrug: InsuranceCardScan.Service? = nil, brandNamePrescriptionDrugFormulary: InsuranceCardScan.Service? = nil, brandNamePrescriptionDrugNonFormulary: InsuranceCardScan.Service? = nil, burnCare: InsuranceCardScan.Service? = nil, cabulance: InsuranceCardScan.Service? = nil, cancer: InsuranceCardScan.Service? = nil, cardiac: InsuranceCardScan.Service? = nil, cardiacRehabilitation: InsuranceCardScan.Service? = nil, caseManagement: InsuranceCardScan.Service? = nil, chemotherapy: InsuranceCardScan.Service? = nil, chiropractic: InsuranceCardScan.Service? = nil, chiropracticOfficeVisits: InsuranceCardScan.Service? = nil, chronicRenalDiseaseCrdEquipment: InsuranceCardScan.Service? = nil, cognitiveTherapy: InsuranceCardScan.Service? = nil, consultation: InsuranceCardScan.Service? = nil, coronaryCare: InsuranceCardScan.Service? = nil, dayCarePsychiatric: InsuranceCardScan.Service? = nil, dentalAccident: InsuranceCardScan.Service? = nil, dentalCare: InsuranceCardScan.Service? = nil, dentalCrowns: InsuranceCardScan.Service? = nil, dermatology: InsuranceCardScan.Service? = nil, diabeticSupplies: InsuranceCardScan.Service? = nil, diagnosticDental: InsuranceCardScan.Service? = nil, diagnosticLab: InsuranceCardScan.Service? = nil, diagnosticMedical: InsuranceCardScan.Service? = nil, diagnosticXRay: InsuranceCardScan.Service? = nil, dialysis: InsuranceCardScan.Service? = nil, donorProcedures: InsuranceCardScan.Service? = nil, drugAddiction: InsuranceCardScan.Service? = nil, durableMedicalEquipment: InsuranceCardScan.Service? = nil, durableMedicalEquipmentPurchase: InsuranceCardScan.Service? = nil, durableMedicalEquipmentRental: InsuranceCardScan.Service? = nil, emergencyRoom: InsuranceCardScan.Service? = nil, endocrine: InsuranceCardScan.Service? = nil, endodontics: InsuranceCardScan.Service? = nil, experimentalDrugTherapy: InsuranceCardScan.Service? = nil, eye: InsuranceCardScan.Service? = nil, eyewearAndEyewearAccessories: InsuranceCardScan.Service? = nil, familyPlanning: InsuranceCardScan.Service? = nil, fluVaccination: InsuranceCardScan.Service? = nil, frames: InsuranceCardScan.Service? = nil, freeStandingPrescriptionDrug: InsuranceCardScan.Service? = nil, gastrointestinal: InsuranceCardScan.Service? = nil, generalBenefits: InsuranceCardScan.Service? = nil, genericPrescriptionDrug: InsuranceCardScan.Service? = nil, genericPrescriptionDrugFormulary: InsuranceCardScan.Service? = nil, genericPrescriptionDrugNonFormulary: InsuranceCardScan.Service? = nil, gynecological: InsuranceCardScan.Service? = nil, homeHealthCare: InsuranceCardScan.Service? = nil, homeHealthPrescriptions: InsuranceCardScan.Service? = nil, homeHealthVisits: InsuranceCardScan.Service? = nil, hospice: InsuranceCardScan.Service? = nil, hospitalInpatient: InsuranceCardScan.Service? = nil, hospitalAmbulatorySurgical: InsuranceCardScan.Service? = nil, hospitalEmergencyAccident: InsuranceCardScan.Service? = nil, hospitalEmergencyMedical: InsuranceCardScan.Service? = nil, hospitalOutpatient: InsuranceCardScan.Service? = nil, hospitalRoomAndBoard: InsuranceCardScan.Service? = nil, immunizations: InsuranceCardScan.Service? = nil, inVitroFertilization: InsuranceCardScan.Service? = nil, independentMedicalEvaluation: InsuranceCardScan.Service? = nil, infertility: InsuranceCardScan.Service? = nil, inhalationTherapy: InsuranceCardScan.Service? = nil, intensiveCare: InsuranceCardScan.Service? = nil, invasiveProcedures: InsuranceCardScan.Service? = nil, lenses: InsuranceCardScan.Service? = nil, licensedAmbulance: InsuranceCardScan.Service? = nil, longTermCare: InsuranceCardScan.Service? = nil, lymphatic: InsuranceCardScan.Service? = nil, mailOrderPrescriptionDrug: InsuranceCardScan.Service? = nil, mailOrderPrescriptionDrugBrandName: InsuranceCardScan.Service? = nil, mailOrderPrescriptionDrugGeneric: InsuranceCardScan.Service? = nil, majorMedical: InsuranceCardScan.Service? = nil, mammogramHighRiskPatient: InsuranceCardScan.Service? = nil, mammogramLowRiskPatient: InsuranceCardScan.Service? = nil, massageTherapy: InsuranceCardScan.Service? = nil, maternity: InsuranceCardScan.Service? = nil, maxillofacialProsthetics: InsuranceCardScan.Service? = nil, medicalCare: InsuranceCardScan.Service? = nil, medicallyRelatedTransportation: InsuranceCardScan.Service? = nil, mentalHealth: InsuranceCardScan.Service? = nil, mentalHealthFacilityInpatient: InsuranceCardScan.Service? = nil, mentalHealthFacilityOutpatient: InsuranceCardScan.Service? = nil, mentalHealthProviderInpatient: InsuranceCardScan.Service? = nil, mentalHealthProviderOutpatient: InsuranceCardScan.Service? = nil, mriCatScan: InsuranceCardScan.Service? = nil, neonatalIntensiveCare: InsuranceCardScan.Service? = nil, neurology: InsuranceCardScan.Service? = nil, newbornCare: InsuranceCardScan.Service? = nil, nonmedicallyNecessaryPhysical: InsuranceCardScan.Service? = nil, nursery: InsuranceCardScan.Service? = nil, obstetrical: InsuranceCardScan.Service? = nil, obstetricalGynecological: InsuranceCardScan.Service? = nil, occupationalTherapy: InsuranceCardScan.Service? = nil, oncology: InsuranceCardScan.Service? = nil, oralSurgery: InsuranceCardScan.Service? = nil, orthodontics: InsuranceCardScan.Service? = nil, orthopedic: InsuranceCardScan.Service? = nil, otherMedical: InsuranceCardScan.Service? = nil, otologicalExam: InsuranceCardScan.Service? = nil, partialHospitalizationPsychiatric: InsuranceCardScan.Service? = nil, pathology: InsuranceCardScan.Service? = nil, pediatric: InsuranceCardScan.Service? = nil, periodontics: InsuranceCardScan.Service? = nil, pharmacy: InsuranceCardScan.Service? = nil, physicalMedicine: InsuranceCardScan.Service? = nil, physicalTherapy: InsuranceCardScan.Service? = nil, physicianVisitOfficeSick: InsuranceCardScan.Service? = nil, physicianVisitOfficeWell: InsuranceCardScan.Service? = nil, planWaitingPeriod: InsuranceCardScan.Service? = nil, pneumoniaVaccine: InsuranceCardScan.Service? = nil, podiatry: InsuranceCardScan.Service? = nil, podiatryNursingHomeVisits: InsuranceCardScan.Service? = nil, podiatryOfficeVisits: InsuranceCardScan.Service? = nil, preAdmissionTesting: InsuranceCardScan.Service? = nil, privateDutyNursing: InsuranceCardScan.Service? = nil, privateDutyNursingHome: InsuranceCardScan.Service? = nil, privateDutyNursingInpatient: InsuranceCardScan.Service? = nil, professionalPhysician: InsuranceCardScan.Service? = nil, professionalPhysicianVisitHome: InsuranceCardScan.Service? = nil, professionalPhysicianVisitInpatient: InsuranceCardScan.Service? = nil, professionalPhysicianVisitNursingHome: InsuranceCardScan.Service? = nil, officeVisit: InsuranceCardScan.Service? = nil, professionalPhysicianVisitOutpatient: InsuranceCardScan.Service? = nil, professionalPhysicianVisitSkilledNursing: InsuranceCardScan.Service? = nil, prostheticDevice: InsuranceCardScan.Service? = nil, prosthodontics: InsuranceCardScan.Service? = nil, psychiatric: InsuranceCardScan.Service? = nil, psychiatricInpatient: InsuranceCardScan.Service? = nil, psychiatricOutpatient: InsuranceCardScan.Service? = nil, psychiatricRoomAndBoard: InsuranceCardScan.Service? = nil, psychotherapy: InsuranceCardScan.Service? = nil, pulmonary: InsuranceCardScan.Service? = nil, pulmonaryRehabilitation: InsuranceCardScan.Service? = nil, radiationTherapy: InsuranceCardScan.Service? = nil, rehabilitation: InsuranceCardScan.Service? = nil, rehabilitationInpatient: InsuranceCardScan.Service? = nil, rehabilitationOutpatient: InsuranceCardScan.Service? = nil, rehabilitationRoomAndBoard: InsuranceCardScan.Service? = nil, renal: InsuranceCardScan.Service? = nil, renalSuppliesInTheHome: InsuranceCardScan.Service? = nil, residentialPsychiatricTreatment: InsuranceCardScan.Service? = nil, respiteCare: InsuranceCardScan.Service? = nil, restorative: InsuranceCardScan.Service? = nil, routinePreventiveDental: InsuranceCardScan.Service? = nil, routineExamUseForRoutineVisionExamOnly: InsuranceCardScan.Service? = nil, routinePhysical: InsuranceCardScan.Service? = nil, screeningLaboratory: InsuranceCardScan.Service? = nil, screeningXRay: InsuranceCardScan.Service? = nil, secondSurgicalOpinion: InsuranceCardScan.Service? = nil, skilledNursingCare: InsuranceCardScan.Service? = nil, skilledNursingCareRoomAndBoard: InsuranceCardScan.Service? = nil, skin: InsuranceCardScan.Service? = nil, smokingCessation: InsuranceCardScan.Service? = nil, socialWork: InsuranceCardScan.Service? = nil, speechTherapy: InsuranceCardScan.Service? = nil, substanceAbuse: InsuranceCardScan.Service? = nil, substanceAbuseFacilityInpatient: InsuranceCardScan.Service? = nil, substanceAbuseFacilityOutpatient: InsuranceCardScan.Service? = nil, substanceAbuseProviderInpatient: InsuranceCardScan.Service? = nil, substanceAbuseProviderOutpatient: InsuranceCardScan.Service? = nil, surgical: InsuranceCardScan.Service? = nil, surgicalAssistance: InsuranceCardScan.Service? = nil, surgicalBenefitsFacility: InsuranceCardScan.Service? = nil, surgicalBenefitsProfessionalPhysician: InsuranceCardScan.Service? = nil, thirdSurgicalOpinion: InsuranceCardScan.Service? = nil, transitionalCare: InsuranceCardScan.Service? = nil, transitionalNurseryCare: InsuranceCardScan.Service? = nil, transplants: InsuranceCardScan.Service? = nil, urgentCare: InsuranceCardScan.Service? = nil, usedDurableMedicalEquipment: InsuranceCardScan.Service? = nil, vision: InsuranceCardScan.Service? = nil, wellBabyCare: InsuranceCardScan.Service? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case errors
    case subscriberDetails
    case payerDetails
    case planDetails
    case coverageSummary
    case abortion
    case acupuncture
    case adjunctiveDentalServices
    case aids
    case airTransportation
    case alcoholism
    case allergy
    case allergyTesting
    case alternateMethodDialysis
    case ambulatoryServiceCenterFacility
    case anesthesia
    case anesthesiologist
    case audiologyExam
    case bloodCharges
    case brandNamePrescriptionDrug
    case brandNamePrescriptionDrugFormulary
    case brandNamePrescriptionDrugNonFormulary
    case burnCare
    case cabulance
    case cancer
    case cardiac
    case cardiacRehabilitation
    case caseManagement
    case chemotherapy
    case chiropractic
    case chiropracticOfficeVisits
    case chronicRenalDiseaseCrdEquipment
    case cognitiveTherapy
    case consultation
    case coronaryCare
    case dayCarePsychiatric
    case dentalAccident
    case dentalCare
    case dentalCrowns
    case dermatology
    case diabeticSupplies
    case diagnosticDental
    case diagnosticLab
    case diagnosticMedical
    case diagnosticXRay
    case dialysis
    case donorProcedures
    case drugAddiction
    case durableMedicalEquipment
    case durableMedicalEquipmentPurchase
    case durableMedicalEquipmentRental
    case emergencyRoom
    case endocrine
    case endodontics
    case experimentalDrugTherapy
    case eye
    case eyewearAndEyewearAccessories
    case familyPlanning
    case fluVaccination
    case frames
    case freeStandingPrescriptionDrug
    case gastrointestinal
    case generalBenefits
    case genericPrescriptionDrug
    case genericPrescriptionDrugFormulary
    case genericPrescriptionDrugNonFormulary
    case gynecological
    case homeHealthCare
    case homeHealthPrescriptions
    case homeHealthVisits
    case hospice
    case hospitalInpatient
    case hospitalAmbulatorySurgical
    case hospitalEmergencyAccident
    case hospitalEmergencyMedical
    case hospitalOutpatient
    case hospitalRoomAndBoard
    case immunizations
    case inVitroFertilization
    case independentMedicalEvaluation
    case infertility
    case inhalationTherapy
    case intensiveCare
    case invasiveProcedures
    case lenses
    case licensedAmbulance
    case longTermCare
    case lymphatic
    case mailOrderPrescriptionDrug
    case mailOrderPrescriptionDrugBrandName
    case mailOrderPrescriptionDrugGeneric
    case majorMedical
    case mammogramHighRiskPatient
    case mammogramLowRiskPatient
    case massageTherapy
    case maternity
    case maxillofacialProsthetics
    case medicalCare
    case medicallyRelatedTransportation
    case mentalHealth
    case mentalHealthFacilityInpatient
    case mentalHealthFacilityOutpatient
    case mentalHealthProviderInpatient
    case mentalHealthProviderOutpatient
    case mriCatScan
    case neonatalIntensiveCare
    case neurology
    case newbornCare
    case nonmedicallyNecessaryPhysical
    case nursery
    case obstetrical
    case obstetricalGynecological
    case occupationalTherapy
    case oncology
    case oralSurgery
    case orthodontics
    case orthopedic
    case otherMedical
    case otologicalExam
    case partialHospitalizationPsychiatric
    case pathology
    case pediatric
    case periodontics
    case pharmacy
    case physicalMedicine
    case physicalTherapy
    case physicianVisitOfficeSick
    case physicianVisitOfficeWell
    case planWaitingPeriod
    case pneumoniaVaccine
    case podiatry
    case podiatryNursingHomeVisits
    case podiatryOfficeVisits
    case preAdmissionTesting
    case privateDutyNursing
    case privateDutyNursingHome
    case privateDutyNursingInpatient
    case professionalPhysician
    case professionalPhysicianVisitHome
    case professionalPhysicianVisitInpatient
    case professionalPhysicianVisitNursingHome
    case officeVisit
    case professionalPhysicianVisitOutpatient
    case professionalPhysicianVisitSkilledNursing
    case prostheticDevice
    case prosthodontics
    case psychiatric
    case psychiatricInpatient
    case psychiatricOutpatient
    case psychiatricRoomAndBoard
    case psychotherapy
    case pulmonary
    case pulmonaryRehabilitation
    case radiationTherapy
    case rehabilitation
    case rehabilitationInpatient
    case rehabilitationOutpatient
    case rehabilitationRoomAndBoard
    case renal
    case renalSuppliesInTheHome
    case residentialPsychiatricTreatment
    case respiteCare
    case restorative
    case routinePreventiveDental
    case routineExamUseForRoutineVisionExamOnly
    case routinePhysical
    case screeningLaboratory
    case screeningXRay
    case secondSurgicalOpinion
    case skilledNursingCare
    case skilledNursingCareRoomAndBoard
    case skin
    case smokingCessation
    case socialWork
    case speechTherapy
    case substanceAbuse
    case substanceAbuseFacilityInpatient
    case substanceAbuseFacilityOutpatient
    case substanceAbuseProviderInpatient
    case substanceAbuseProviderOutpatient
    case surgical
    case surgicalAssistance
    case surgicalBenefitsFacility
    case surgicalBenefitsProfessionalPhysician
    case thirdSurgicalOpinion
    case transitionalCare
    case transitionalNurseryCare
    case transplants
    case urgentCare
    case usedDurableMedicalEquipment
    case vision
    case wellBabyCare
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.EligibilitySummarizedResponse.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.EligibilitySummarizedResponse.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.EligibilitySummarizedResponse, b: InsuranceCardScan.EligibilitySummarizedResponse) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct EligibilityInfo : Swift.Codable, Swift.Hashable {
  public var provider: InsuranceCardScan.ProviderDto
  public var subscriber: InsuranceCardScan.SubscriberDto
  public init(provider: InsuranceCardScan.ProviderDto, subscriber: InsuranceCardScan.SubscriberDto)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case provider
    case subscriber
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.EligibilityInfo.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.EligibilityInfo.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.EligibilityInfo, b: InsuranceCardScan.EligibilityInfo) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public enum PhoneNumberType : Swift.String, Swift.Codable, Swift.CaseIterable {
  case pcpPhone
  case memberServicesPhone
  case providerServicesPhone
  case pharmacyServicesPhone
  case dentalBenefitPhone
  case visionBenefitPhone
  case telemedicinePhone
  public init?(rawValue: Swift.String)
  public typealias AllCases = [InsuranceCardScan.PhoneNumberType]
  public typealias RawValue = Swift.String
  public static var allCases: [InsuranceCardScan.PhoneNumberType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct Service : Swift.Codable, Swift.Hashable {
  public var individualDeductibleInNetwork: InsuranceCardScan.Deductible?
  public var individualDeductibleOutNetwork: InsuranceCardScan.Deductible?
  public var individualOopInNetwork: InsuranceCardScan.OOP?
  public var individualOopOutNetwork: InsuranceCardScan.OOP?
  public var familyDeductibleInNetwork: InsuranceCardScan.Deductible?
  public var familyDeductibleOutNetwork: InsuranceCardScan.Deductible?
  public var familyOopInNetwork: InsuranceCardScan.OOP?
  public var familyOopOutNetwork: InsuranceCardScan.OOP?
  public var coInsuranceInNetwork: InsuranceCardScan.CoInsurance?
  public var coInsuranceOutNetwork: InsuranceCardScan.CoInsurance?
  public var coPaymentOutNetwork: InsuranceCardScan.CoPayment?
  public var coPaymentInNetwork: InsuranceCardScan.CoPayment?
  public var serviceCode: Swift.String?
  public init(individualDeductibleInNetwork: InsuranceCardScan.Deductible? = nil, individualDeductibleOutNetwork: InsuranceCardScan.Deductible? = nil, individualOopInNetwork: InsuranceCardScan.OOP? = nil, individualOopOutNetwork: InsuranceCardScan.OOP? = nil, familyDeductibleInNetwork: InsuranceCardScan.Deductible? = nil, familyDeductibleOutNetwork: InsuranceCardScan.Deductible? = nil, familyOopInNetwork: InsuranceCardScan.OOP? = nil, familyOopOutNetwork: InsuranceCardScan.OOP? = nil, coInsuranceInNetwork: InsuranceCardScan.CoInsurance? = nil, coInsuranceOutNetwork: InsuranceCardScan.CoInsurance? = nil, coPaymentOutNetwork: InsuranceCardScan.CoPayment? = nil, coPaymentInNetwork: InsuranceCardScan.CoPayment? = nil, serviceCode: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case individualDeductibleInNetwork
    case individualDeductibleOutNetwork
    case individualOopInNetwork
    case individualOopOutNetwork
    case familyDeductibleInNetwork
    case familyDeductibleOutNetwork
    case familyOopInNetwork
    case familyOopOutNetwork
    case coInsuranceInNetwork
    case coInsuranceOutNetwork
    case coPaymentOutNetwork
    case coPaymentInNetwork
    case serviceCode
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.Service.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.Service.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.Service, b: InsuranceCardScan.Service) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct ProviderDto : Swift.Codable, Swift.Hashable {
  public var firstName: Swift.String?
  public var lastName: Swift.String?
  public var npi: Swift.String
  public var organizationName: Swift.String?
  public init(firstName: Swift.String? = nil, lastName: Swift.String? = nil, npi: Swift.String, organizationName: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case firstName
    case lastName
    case npi
    case organizationName
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.ProviderDto.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.ProviderDto.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.ProviderDto, b: InsuranceCardScan.ProviderDto) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct StringRule {
  public var minLength: Swift.Int?
  public var maxLength: Swift.Int?
  public var pattern: Swift.String?
}
public struct NumericRule<T> where T : Swift.Comparable, T : Swift.Numeric {
  public var minimum: T?
  public var exclusiveMinimum: Swift.Bool
  public var maximum: T?
  public var exclusiveMaximum: Swift.Bool
  public var multipleOf: T?
}
public enum StringValidationErrorKind : Swift.Error {
  case minLength, maxLength, pattern
  public static func == (a: InsuranceCardScan.StringValidationErrorKind, b: InsuranceCardScan.StringValidationErrorKind) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum NumericValidationErrorKind : Swift.Error {
  case minimum, maximum, multipleOf
  public static func == (a: InsuranceCardScan.NumericValidationErrorKind, b: InsuranceCardScan.NumericValidationErrorKind) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct ValidationError<T> : Swift.Error where T : Swift.Error, T : Swift.Hashable {
  public var kinds: Swift.Set<T> {
    get
  }
}
public struct Validator {
  public static func validate(_ string: Swift.String, against rule: InsuranceCardScan.StringRule) throws -> Swift.String
  public static func validate<T>(_ numeric: T, against rule: InsuranceCardScan.NumericRule<T>) throws -> T where T : Swift.BinaryInteger
  public static func validate<T>(_ numeric: T, against rule: InsuranceCardScan.NumericRule<T>) throws -> T where T : Swift.FloatingPoint
}
public struct CreateCardRequest : Swift.Codable, Swift.Hashable {
  public var enableBacksideScan: Swift.Bool?
  public var enableLivescan: Swift.Bool?
  public var backside: InsuranceCardScan.CreateCardRequestBackside?
  public var metadata: InsuranceCardScan.AnyCodable?
  public init(enableBacksideScan: Swift.Bool? = false, enableLivescan: Swift.Bool? = false, backside: InsuranceCardScan.CreateCardRequestBackside? = nil, metadata: InsuranceCardScan.AnyCodable? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case enableBacksideScan
    case enableLivescan
    case backside
    case metadata
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.CreateCardRequest.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.CreateCardRequest.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.CreateCardRequest, b: InsuranceCardScan.CreateCardRequest) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct CardApiResponseDetails : Swift.Codable, Swift.Hashable {
  public var groupNumber: InsuranceCardScan.MatchScore?
  public var memberNumber: InsuranceCardScan.MatchScore?
  public var payerName: InsuranceCardScan.MatchScore?
  public var rxBin: InsuranceCardScan.MatchScore?
  public var rxPcn: InsuranceCardScan.MatchScore?
  public var memberName: InsuranceCardScan.MatchScore?
  public var dependentNames: [InsuranceCardScan.MatchScore]?
  public var planName: InsuranceCardScan.MatchScore?
  public var planId: InsuranceCardScan.MatchScore?
  public var cardSpecificId: InsuranceCardScan.MatchScore?
  public var clientName: InsuranceCardScan.MatchScore?
  public var payerId: InsuranceCardScan.MatchScore?
  public var planDetails: InsuranceCardScan.MatchScore?
  public var rxId: InsuranceCardScan.MatchScore?
  public var rxIssuer: InsuranceCardScan.MatchScore?
  public var rxPlan: InsuranceCardScan.MatchScore?
  public var startDate: InsuranceCardScan.MatchScore?
  public var employer: InsuranceCardScan.MatchScore?
  public var medicareMedicaidId: InsuranceCardScan.MatchScore?
  public var memberDob: InsuranceCardScan.MatchScore?
  public var memberGender: InsuranceCardScan.MatchScore?
  public var memberIdPrefix: InsuranceCardScan.MatchScore?
  public var memberIdSuffix: InsuranceCardScan.MatchScore?
  public var partAEffectiveDate: InsuranceCardScan.MatchScore?
  public var partBEffectiveDate: InsuranceCardScan.MatchScore?
  public var pharmacyBenefitManager: InsuranceCardScan.MatchScore?
  public var planType: InsuranceCardScan.MatchScore?
  public var addresses: [InsuranceCardScan.AddressResultInner]?
  public var phoneNumbers: [InsuranceCardScan.PhoneNumberResultInner]?
  public var copays: [InsuranceCardScan.CopayResultInner]?
  public init(groupNumber: InsuranceCardScan.MatchScore? = nil, memberNumber: InsuranceCardScan.MatchScore? = nil, payerName: InsuranceCardScan.MatchScore? = nil, rxBin: InsuranceCardScan.MatchScore? = nil, rxPcn: InsuranceCardScan.MatchScore? = nil, memberName: InsuranceCardScan.MatchScore? = nil, dependentNames: [InsuranceCardScan.MatchScore]? = nil, planName: InsuranceCardScan.MatchScore? = nil, planId: InsuranceCardScan.MatchScore? = nil, cardSpecificId: InsuranceCardScan.MatchScore? = nil, clientName: InsuranceCardScan.MatchScore? = nil, payerId: InsuranceCardScan.MatchScore? = nil, planDetails: InsuranceCardScan.MatchScore? = nil, rxId: InsuranceCardScan.MatchScore? = nil, rxIssuer: InsuranceCardScan.MatchScore? = nil, rxPlan: InsuranceCardScan.MatchScore? = nil, startDate: InsuranceCardScan.MatchScore? = nil, employer: InsuranceCardScan.MatchScore? = nil, medicareMedicaidId: InsuranceCardScan.MatchScore? = nil, memberDob: InsuranceCardScan.MatchScore? = nil, memberGender: InsuranceCardScan.MatchScore? = nil, memberIdPrefix: InsuranceCardScan.MatchScore? = nil, memberIdSuffix: InsuranceCardScan.MatchScore? = nil, partAEffectiveDate: InsuranceCardScan.MatchScore? = nil, partBEffectiveDate: InsuranceCardScan.MatchScore? = nil, pharmacyBenefitManager: InsuranceCardScan.MatchScore? = nil, planType: InsuranceCardScan.MatchScore? = nil, addresses: [InsuranceCardScan.AddressResultInner]? = nil, phoneNumbers: [InsuranceCardScan.PhoneNumberResultInner]? = nil, copays: [InsuranceCardScan.CopayResultInner]? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case groupNumber
    case memberNumber
    case payerName
    case rxBin
    case rxPcn
    case memberName
    case dependentNames
    case planName
    case planId
    case cardSpecificId
    case clientName
    case payerId
    case planDetails
    case rxId
    case rxIssuer
    case rxPlan
    case startDate
    case employer
    case medicareMedicaidId
    case memberDob
    case memberGender
    case memberIdPrefix
    case memberIdSuffix
    case partAEffectiveDate
    case partBEffectiveDate
    case pharmacyBenefitManager
    case planType
    case addresses
    case phoneNumbers
    case copays
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.CardApiResponseDetails.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.CardApiResponseDetails.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.CardApiResponseDetails, b: InsuranceCardScan.CardApiResponseDetails) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct WebhookCardCompletedEventConfiguration : Swift.Codable, Swift.Hashable {
  public var enableBacksideScan: Swift.Bool
  public var enableLivescan: Swift.Bool
  public var enablePayerMatch: Swift.Bool
  public init(enableBacksideScan: Swift.Bool, enableLivescan: Swift.Bool, enablePayerMatch: Swift.Bool)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case enableBacksideScan
    case enableLivescan
    case enablePayerMatch
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.WebhookCardCompletedEventConfiguration.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.WebhookCardCompletedEventConfiguration.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.WebhookCardCompletedEventConfiguration, b: InsuranceCardScan.WebhookCardCompletedEventConfiguration) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct CardApiResponse : Swift.Codable, Swift.Hashable {
  public var cardId: Foundation.UUID
  public var state: InsuranceCardScan.CardState
  public var createdAt: Foundation.Date
  public var error: InsuranceCardScan.ModelError?
  public var payerMatch: InsuranceCardScan.PayerMatch?
  public var metadata: InsuranceCardScan.CardResponseMetadata?
  public var images: InsuranceCardScan.CardApiResponseImages?
  public var deleted: Swift.Bool
  public var details: InsuranceCardScan.CardApiResponseDetails?
  public init(cardId: Foundation.UUID, state: InsuranceCardScan.CardState, createdAt: Foundation.Date, error: InsuranceCardScan.ModelError? = nil, payerMatch: InsuranceCardScan.PayerMatch? = nil, metadata: InsuranceCardScan.CardResponseMetadata? = nil, images: InsuranceCardScan.CardApiResponseImages? = nil, deleted: Swift.Bool, details: InsuranceCardScan.CardApiResponseDetails? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case cardId
    case state
    case createdAt
    case error
    case payerMatch
    case metadata
    case images
    case deleted
    case details
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.CardApiResponse.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.CardApiResponse.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.CardApiResponse, b: InsuranceCardScan.CardApiResponse) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct WebhookCardErrorEventError : Swift.Codable, Swift.Hashable {
  public var error: Swift.String
  public var message: Swift.String
  public init(error: Swift.String, message: Swift.String)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case error
    case message
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.WebhookCardErrorEventError.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.WebhookCardErrorEventError.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.WebhookCardErrorEventError, b: InsuranceCardScan.WebhookCardErrorEventError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public protocol URLSessionDataTaskProtocol {
  func resume()
  var taskIdentifier: Swift.Int { get }
  var progress: Foundation.Progress { get }
  func cancel()
}
public protocol URLSessionProtocol {
  #if compiler(>=5.3) && $Sendable
  func dataTaskFromProtocol(with request: Foundation.URLRequest, completionHandler: @escaping @Sendable (Foundation.Data?, Foundation.URLResponse?, (any Swift.Error)?) -> Swift.Void) -> any InsuranceCardScan.URLSessionDataTaskProtocol
  #endif
}
extension Foundation.URLSession : InsuranceCardScan.URLSessionProtocol {
  #if compiler(>=5.3) && $Sendable
  public func dataTaskFromProtocol(with request: Foundation.URLRequest, completionHandler: @escaping @Sendable (Foundation.Data?, Foundation.URLResponse?, (any Swift.Error)?) -> Swift.Void) -> any InsuranceCardScan.URLSessionDataTaskProtocol
  #endif
}
extension Foundation.URLSessionDataTask : InsuranceCardScan.URLSessionDataTaskProtocol {
}
public typealias CardScanClientAPIChallengeHandler = ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.URLAuthenticationChallenge) -> (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?))
@_inheritsConvenienceInitializers open class URLSessionRequestBuilder<T> : InsuranceCardScan.RequestBuilder<T> {
  public var taskDidReceiveChallenge: InsuranceCardScan.CardScanClientAPIChallengeHandler?
  required public init(method: Swift.String, URLString: Swift.String, parameters: [Swift.String : Any]?, headers: [Swift.String : Swift.String] = [:], requiresAuthentication: Swift.Bool)
  open func createURLSession() -> any InsuranceCardScan.URLSessionProtocol
  open func contentTypeForFormPart(fileURL: Foundation.URL) -> Swift.String?
  open func createURLRequest(urlSession: any InsuranceCardScan.URLSessionProtocol, method: InsuranceCardScan.HTTPMethod, encoding: any InsuranceCardScan.ParameterEncoding, headers: [Swift.String : Swift.String]) throws -> Foundation.URLRequest
  @discardableResult
  override open func execute(_ apiResponseQueue: Dispatch.DispatchQueue = CardScanClientAPI.apiResponseQueue, _ completion: @escaping (_ result: Swift.Result<InsuranceCardScan.Response<T>, InsuranceCardScan.ErrorResponse>) -> Swift.Void) -> InsuranceCardScan.RequestTask
  open func buildHeaders() -> [Swift.String : Swift.String]
  @objc deinit
}
@_inheritsConvenienceInitializers open class URLSessionDecodableRequestBuilder<T> : InsuranceCardScan.URLSessionRequestBuilder<T> where T : Swift.Decodable {
  required public init(method: Swift.String, URLString: Swift.String, parameters: [Swift.String : Any]?, headers: [Swift.String : Swift.String] = super, requiresAuthentication: Swift.Bool)
  @objc deinit
}
public enum HTTPMethod : Swift.String {
  case options
  case get
  case head
  case post
  case put
  case patch
  case delete
  case trace
  case connect
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol ParameterEncoding {
  func encode(_ urlRequest: Foundation.URLRequest, with parameters: [Swift.String : Any]?) throws -> Foundation.URLRequest
}
extension InsuranceCardScan.JSONDataEncoding : InsuranceCardScan.ParameterEncoding {
}
public struct ListEligibility200Response : Swift.Codable, Swift.Hashable {
  public var eligibilityRequests: [InsuranceCardScan.EligibilityApiResponse]
  public var responseMetadata: InsuranceCardScan.ResponseMetadata
  public init(eligibilityRequests: [InsuranceCardScan.EligibilityApiResponse], responseMetadata: InsuranceCardScan.ResponseMetadata)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case eligibilityRequests
    case responseMetadata
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.ListEligibility200Response.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.ListEligibility200Response.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.ListEligibility200Response, b: InsuranceCardScan.ListEligibility200Response) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct SubscriberDetails : Swift.Codable, Swift.Hashable {
  public var memberId: Swift.String?
  public var firstName: Swift.String?
  public var lastName: Swift.String?
  public var middleName: Swift.String?
  public var gender: Swift.String?
  public var address: InsuranceCardScan.Address?
  public var dateOfBirth: Swift.String?
  public init(memberId: Swift.String? = nil, firstName: Swift.String? = nil, lastName: Swift.String? = nil, middleName: Swift.String? = nil, gender: Swift.String? = nil, address: InsuranceCardScan.Address? = nil, dateOfBirth: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case memberId
    case firstName
    case lastName
    case middleName
    case gender
    case address
    case dateOfBirth
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.SubscriberDetails.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.SubscriberDetails.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.SubscriberDetails, b: InsuranceCardScan.SubscriberDetails) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct GenerateMagicLink200Response : Swift.Codable, Swift.Hashable {
  public var magicLink: Swift.String
  public var token: Swift.String
  public var expiresAt: Foundation.Date
  public init(magicLink: Swift.String, token: Swift.String, expiresAt: Foundation.Date)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case magicLink
    case token
    case expiresAt
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.GenerateMagicLink200Response.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.GenerateMagicLink200Response.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.GenerateMagicLink200Response, b: InsuranceCardScan.GenerateMagicLink200Response) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct OOP : Swift.Codable, Swift.Hashable {
  public var totalAmount: Swift.String?
  public var remainingAmount: Swift.String?
  public init(totalAmount: Swift.String? = nil, remainingAmount: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case totalAmount
    case remainingAmount
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.OOP.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.OOP.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.OOP, b: InsuranceCardScan.OOP) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct EligibilityApiResponseError : Swift.Codable, Swift.Hashable {
  public var type: Swift.String?
  public var code: Swift.String?
  public var message: Swift.String?
  public init(type: Swift.String? = nil, code: Swift.String? = nil, message: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case type
    case code
    case message
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.EligibilityApiResponseError.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.EligibilityApiResponseError.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.EligibilityApiResponseError, b: InsuranceCardScan.EligibilityApiResponseError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct WebhookEligibilityDeletedEvent : Swift.Codable, Swift.Hashable {
  public var eligibilityId: Foundation.UUID
  public var cardId: Foundation.UUID
  public var createdAt: Foundation.Date
  public var deleted: Swift.Bool
  public var sessionId: Swift.String
  public var type: Swift.String
  public var updatedAt: Foundation.Date
  public var userId: Swift.String
  public init(eligibilityId: Foundation.UUID, cardId: Foundation.UUID, createdAt: Foundation.Date, deleted: Swift.Bool, sessionId: Swift.String, type: Swift.String, updatedAt: Foundation.Date, userId: Swift.String)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case eligibilityId
    case cardId
    case createdAt
    case deleted
    case sessionId
    case type
    case updatedAt
    case userId
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.WebhookEligibilityDeletedEvent.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.WebhookEligibilityDeletedEvent.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.WebhookEligibilityDeletedEvent, b: InsuranceCardScan.WebhookEligibilityDeletedEvent) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct DirectUpload200ResponseMetadata : Swift.Codable, Swift.Hashable {
  public var ocrLatency: Swift.String?
  public init(ocrLatency: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case ocrLatency
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.DirectUpload200ResponseMetadata.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.DirectUpload200ResponseMetadata.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.DirectUpload200ResponseMetadata, b: InsuranceCardScan.DirectUpload200ResponseMetadata) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@frozen public struct AnyCodable : Swift.Codable {
  public let value: Any
  public init<T>(_ value: T?)
}
extension InsuranceCardScan.AnyCodable : InsuranceCardScan._AnyEncodable, InsuranceCardScan._AnyDecodable {
}
extension InsuranceCardScan.AnyCodable : Swift.Equatable {
  public static func == (lhs: InsuranceCardScan.AnyCodable, rhs: InsuranceCardScan.AnyCodable) -> Swift.Bool
}
extension InsuranceCardScan.AnyCodable : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension InsuranceCardScan.AnyCodable : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension InsuranceCardScan.AnyCodable : Swift.ExpressibleByNilLiteral {
}
extension InsuranceCardScan.AnyCodable : Swift.ExpressibleByBooleanLiteral {
  public typealias BooleanLiteralType = Swift.Bool
}
extension InsuranceCardScan.AnyCodable : Swift.ExpressibleByIntegerLiteral {
  public typealias IntegerLiteralType = Swift.Int
}
extension InsuranceCardScan.AnyCodable : Swift.ExpressibleByFloatLiteral {
  public typealias FloatLiteralType = Swift.Double
}
extension InsuranceCardScan.AnyCodable : Swift.ExpressibleByStringLiteral {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension InsuranceCardScan.AnyCodable : Swift.ExpressibleByStringInterpolation {
  public typealias StringInterpolation = Swift.DefaultStringInterpolation
}
extension InsuranceCardScan.AnyCodable : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = Any
}
extension InsuranceCardScan.AnyCodable : Swift.ExpressibleByDictionaryLiteral {
  public typealias Key = Swift.AnyHashable
  public typealias Value = Any
}
extension InsuranceCardScan.AnyCodable : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum CopayDeductibleService : Swift.String, Swift.Codable, Swift.CaseIterable {
  case officeVisit
  case specialistVisit
  case emergencyRoom
  case urgentCare
  case preventiveCare
  case prescription
  case vision
  case dental
  case telemedicine
  case inNetworkMedical
  case outOfNetworkMedical
  case other
  public init?(rawValue: Swift.String)
  public typealias AllCases = [InsuranceCardScan.CopayDeductibleService]
  public typealias RawValue = Swift.String
  public static var allCases: [InsuranceCardScan.CopayDeductibleService] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct WebhookEligibilityErrorEvent : Swift.Codable, Swift.Hashable {
  public var eligibilityId: Foundation.UUID
  public var cardId: Foundation.UUID
  public var createdAt: Foundation.Date
  public var deleted: Swift.Bool
  public var error: InsuranceCardScan.WebhookEligibilityErrorEventError
  public var sessionId: Swift.String
  public var type: Swift.String
  public var updatedAt: Foundation.Date
  public var userId: Swift.String
  public init(eligibilityId: Foundation.UUID, cardId: Foundation.UUID, createdAt: Foundation.Date, deleted: Swift.Bool, error: InsuranceCardScan.WebhookEligibilityErrorEventError, sessionId: Swift.String, type: Swift.String, updatedAt: Foundation.Date, userId: Swift.String)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case eligibilityId
    case cardId
    case createdAt
    case deleted
    case error
    case sessionId
    case type
    case updatedAt
    case userId
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.WebhookEligibilityErrorEvent.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.WebhookEligibilityErrorEvent.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.WebhookEligibilityErrorEvent, b: InsuranceCardScan.WebhookEligibilityErrorEvent) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct CardScanConfig {
  public init(sessionToken: Swift.String, live: Swift.Bool, onSuccess: @escaping (InsuranceCardScan.InsuranceCard) -> Swift.Void, eligibility: InsuranceCardScan.EligibilityRequest? = nil, messages: [Swift.String : Swift.String]? = nil, messageStyle: InsuranceCardScan.MessageStyle? = nil, autoSwitchActiveColor: UIKit.UIColor? = nil, autoSwitchInactiveColor: UIKit.UIColor? = nil, progressBarColor: UIKit.UIColor? = nil, widgetBackgroundColor: UIKit.UIColor? = nil, onCancel: (() -> Swift.Void)? = nil, onError: ((InsuranceCardScan.CardScanError) -> Swift.Void)? = nil, onProgress: ((Swift.Double) -> Swift.Void)? = nil, onEligibilitySuccess: ((InsuranceCardScan.Eligibility) -> Swift.Void)? = nil, onEligibilityError: ((InsuranceCardScan.CardScanError) -> Swift.Void)? = nil, backsideSupport: Swift.Bool? = nil, onRetry: (() -> Swift.Void)? = nil, cameraOptions: InsuranceCardScan.CameraOptions? = nil, logging: InsuranceCardScan.LogLevel? = nil, inspectable: Swift.Bool? = false)
}
public enum LogLevel : Swift.String, Swift.Codable {
  case off, normal, verbose, detector, everything
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public let messageKeys: Swift.Set<Swift.String>
public struct MessageStyle {
  public init(fontSize: Swift.Double, textColor: UIKit.UIColor, backgroundColor: UIKit.UIColor)
}
public enum CameraPosition {
  case front
  case back
  case unspecified
  public static func == (a: InsuranceCardScan.CameraPosition, b: InsuranceCardScan.CameraPosition) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct CameraOptions : Swift.Codable {
  public init(flipHorizontal: Swift.Bool? = false, flipVertical: Swift.Bool? = false)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DirectUpload200Response : Swift.Codable, Swift.Hashable {
  public var cardId: Foundation.UUID
  public var scanId: Foundation.UUID
  public var metadata: InsuranceCardScan.DirectUpload200ResponseMetadata
  public init(cardId: Foundation.UUID, scanId: Foundation.UUID, metadata: InsuranceCardScan.DirectUpload200ResponseMetadata)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case cardId
    case scanId
    case metadata
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.DirectUpload200Response.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.DirectUpload200Response.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.DirectUpload200Response, b: InsuranceCardScan.DirectUpload200Response) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public enum DirectUploadRequest : Swift.Codable, Swift.Hashable {
  case typeString(Swift.String)
  case typeURL(Foundation.URL)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.DirectUploadRequest, b: InsuranceCardScan.DirectUploadRequest) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct EligibilityApiResponseEligibilityRequest : Swift.Codable, Swift.Hashable {
  public var controlNumber: Swift.String?
  public var tradingPartnerServiceId: Swift.String?
  public var provider: InsuranceCardScan.EligibilityApiResponseEligibilityRequestProvider?
  public var subscriber: InsuranceCardScan.EligibilityApiResponseEligibilityRequestSubscriber?
  public init(controlNumber: Swift.String? = nil, tradingPartnerServiceId: Swift.String? = nil, provider: InsuranceCardScan.EligibilityApiResponseEligibilityRequestProvider? = nil, subscriber: InsuranceCardScan.EligibilityApiResponseEligibilityRequestSubscriber? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case controlNumber
    case tradingPartnerServiceId
    case provider
    case subscriber
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.EligibilityApiResponseEligibilityRequest.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.EligibilityApiResponseEligibilityRequest.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.EligibilityApiResponseEligibilityRequest, b: InsuranceCardScan.EligibilityApiResponseEligibilityRequest) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct GenerateCardUploadUrl200Response : Swift.Codable, Swift.Hashable {
  public var cardId: Foundation.UUID
  public var scanId: Foundation.UUID
  public var uploadUrl: Swift.String
  public var uploadParameters: InsuranceCardScan.UploadParameters
  public init(cardId: Foundation.UUID, scanId: Foundation.UUID, uploadUrl: Swift.String, uploadParameters: InsuranceCardScan.UploadParameters)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case cardId
    case scanId
    case uploadUrl
    case uploadParameters
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.GenerateCardUploadUrl200Response.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.GenerateCardUploadUrl200Response.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.GenerateCardUploadUrl200Response, b: InsuranceCardScan.GenerateCardUploadUrl200Response) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct PhoneNumberResultInner : Swift.Codable, Swift.Hashable {
  public var value: Swift.String?
  public var scores: [Swift.String]?
  public var type: InsuranceCardScan.PhoneNumberType?
  public var label: Swift.String?
  public init(value: Swift.String? = nil, scores: [Swift.String]? = nil, type: InsuranceCardScan.PhoneNumberType? = nil, label: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case value
    case scores
    case type
    case label
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.PhoneNumberResultInner.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.PhoneNumberResultInner.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.PhoneNumberResultInner, b: InsuranceCardScan.PhoneNumberResultInner) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct ScanMetadataWindowInner : Swift.Codable, Swift.Hashable {
  public var width: Swift.Int?
  public var height: Swift.Int?
  public init(width: Swift.Int? = nil, height: Swift.Int? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case width
    case height
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.ScanMetadataWindowInner.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.ScanMetadataWindowInner.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.ScanMetadataWindowInner, b: InsuranceCardScan.ScanMetadataWindowInner) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@frozen public struct AnyDecodable : Swift.Decodable {
  public let value: Any
  public init<T>(_ value: T?)
}
@usableFromInline
internal protocol _AnyDecodable {
  var value: Any { get }
  init<T>(_ value: T?)
}
extension InsuranceCardScan.AnyDecodable : InsuranceCardScan._AnyDecodable {
}
extension InsuranceCardScan._AnyDecodable {
  public init(from decoder: any Swift.Decoder) throws
}
extension InsuranceCardScan.AnyDecodable : Swift.Equatable {
  public static func == (lhs: InsuranceCardScan.AnyDecodable, rhs: InsuranceCardScan.AnyDecodable) -> Swift.Bool
}
extension InsuranceCardScan.AnyDecodable : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension InsuranceCardScan.AnyDecodable : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension InsuranceCardScan.AnyDecodable : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct WebsocketError : Swift.Codable, Swift.Hashable {
  public var message: Swift.String
  public var type: Swift.String
  public var code: Swift.String
  @available(*, deprecated, message: "This property is deprecated.")
  public var error: Swift.String?
  public init(message: Swift.String, type: Swift.String, code: Swift.String, error: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case message
    case type
    case code
    case error
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.WebsocketError.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.WebsocketError.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.WebsocketError, b: InsuranceCardScan.WebsocketError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct EligibilityApiResponseEligibilityRequestProvider : Swift.Codable, Swift.Hashable {
  public var firstName: Swift.String?
  public var lastName: Swift.String?
  public var organizationName: Swift.String?
  public var npi: Swift.String?
  public init(firstName: Swift.String? = nil, lastName: Swift.String? = nil, organizationName: Swift.String? = nil, npi: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case firstName
    case lastName
    case organizationName
    case npi
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.EligibilityApiResponseEligibilityRequestProvider.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.EligibilityApiResponseEligibilityRequestProvider.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.EligibilityApiResponseEligibilityRequestProvider, b: InsuranceCardScan.EligibilityApiResponseEligibilityRequestProvider) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct WebhookEligibilityErrorEventError : Swift.Codable, Swift.Hashable {
  public var error: Swift.String
  public var message: Swift.String
  public init(error: Swift.String, message: Swift.String)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case error
    case message
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.WebhookEligibilityErrorEventError.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.WebhookEligibilityErrorEventError.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.WebhookEligibilityErrorEventError, b: InsuranceCardScan.WebhookEligibilityErrorEventError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct CoInsurance : Swift.Codable, Swift.Hashable {
  public var amount: Swift.String?
  public init(amount: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case amount
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.CoInsurance.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.CoInsurance.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.CoInsurance, b: InsuranceCardScan.CoInsurance) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct WebhookCardDeletedEvent : Swift.Codable, Swift.Hashable {
  public var cardId: Foundation.UUID
  public var configuration: InsuranceCardScan.WebhookCardCompletedEventConfiguration
  public var createdAt: Foundation.Date
  public var deleted: Swift.Bool
  public var sessionId: Swift.String
  public var type: Swift.String
  public var updatedAt: Foundation.Date
  public var userId: Swift.String
  public init(cardId: Foundation.UUID, configuration: InsuranceCardScan.WebhookCardCompletedEventConfiguration, createdAt: Foundation.Date, deleted: Swift.Bool, sessionId: Swift.String, type: Swift.String, updatedAt: Foundation.Date, userId: Swift.String)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case cardId
    case configuration
    case createdAt
    case deleted
    case sessionId
    case type
    case updatedAt
    case userId
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.WebhookCardDeletedEvent.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.WebhookCardDeletedEvent.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.WebhookCardDeletedEvent, b: InsuranceCardScan.WebhookCardDeletedEvent) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct SearchCards200Response : Swift.Codable, Swift.Hashable {
  public var cards: [InsuranceCardScan.CardApiResponse]
  public var responseMetadata: InsuranceCardScan.ResponseMetadata
  public init(cards: [InsuranceCardScan.CardApiResponse], responseMetadata: InsuranceCardScan.ResponseMetadata)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case cards
    case responseMetadata
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.SearchCards200Response.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.SearchCards200Response.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.SearchCards200Response, b: InsuranceCardScan.SearchCards200Response) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct ApiErrorResponse : Swift.Codable, Swift.Hashable {
  public var message: Swift.String?
  public var type: Swift.String?
  public var code: Swift.Double?
  public init(message: Swift.String? = nil, type: Swift.String? = nil, code: Swift.Double? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case message
    case type
    case code
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.ApiErrorResponse.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.ApiErrorResponse.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.ApiErrorResponse, b: InsuranceCardScan.ApiErrorResponse) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class CardScanViewController : UIKit.UIViewController, WebKit.WKNavigationDelegate, WebKit.WKUIDelegate {
  @_Concurrency.MainActor(unsafe) public var config: InsuranceCardScan.CardScanConfig?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func loadView()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, requestMediaCapturePermissionFor origin: WebKit.WKSecurityOrigin, initiatedByFrame frame: WebKit.WKFrameInfo, type: WebKit.WKMediaCaptureType, decisionHandler: @escaping (WebKit.WKPermissionDecision) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension InsuranceCardScan.CardScanViewController : WebKit.WKScriptMessageHandler {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
}
public struct Address : Swift.Codable, Swift.Hashable {
  public var address1: Swift.String?
  public var address2: Swift.String?
  public var city: Swift.String?
  public var state: Swift.String?
  public var postalCode: Swift.String?
  public init(address1: Swift.String? = nil, address2: Swift.String? = nil, city: Swift.String? = nil, state: Swift.String? = nil, postalCode: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case address1
    case address2
    case city
    case state
    case postalCode
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.Address.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.Address.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.Address, b: InsuranceCardScan.Address) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct WebhookCardCompletedEvent : Swift.Codable, Swift.Hashable {
  public var cardId: Foundation.UUID
  public var configuration: InsuranceCardScan.WebhookCardCompletedEventConfiguration
  public var createdAt: Foundation.Date
  public var deleted: Swift.Bool
  public var sessionId: Swift.String
  public var type: Swift.String
  public var updatedAt: Foundation.Date
  public var userId: Swift.String
  public init(cardId: Foundation.UUID, configuration: InsuranceCardScan.WebhookCardCompletedEventConfiguration, createdAt: Foundation.Date, deleted: Swift.Bool, sessionId: Swift.String, type: Swift.String, updatedAt: Foundation.Date, userId: Swift.String)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case cardId
    case configuration
    case createdAt
    case deleted
    case sessionId
    case type
    case updatedAt
    case userId
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.WebhookCardCompletedEvent.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.WebhookCardCompletedEvent.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.WebhookCardCompletedEvent, b: InsuranceCardScan.WebhookCardCompletedEvent) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class CardScanClientAPI {
  public static var basePath: Swift.String
  public static var customHeaders: [Swift.String : Swift.String]
  public static var credential: Foundation.URLCredential?
  public static var requestBuilderFactory: any InsuranceCardScan.RequestBuilderFactory
  public static var apiResponseQueue: Dispatch.DispatchQueue
  @objc deinit
}
open class RequestBuilder<T> {
  final public let parameters: [Swift.String : Any]?
  final public let method: Swift.String
  final public let URLString: Swift.String
  final public let requestTask: InsuranceCardScan.RequestTask
  final public let requiresAuthentication: Swift.Bool
  public var onProgressReady: ((Foundation.Progress) -> Swift.Void)?
  required public init(method: Swift.String, URLString: Swift.String, parameters: [Swift.String : Any]?, headers: [Swift.String : Swift.String] = [:], requiresAuthentication: Swift.Bool)
  open func addHeaders(_ aHeaders: [Swift.String : Swift.String])
  @discardableResult
  open func execute(_ apiResponseQueue: Dispatch.DispatchQueue = CardScanClientAPI.apiResponseQueue, _ completion: @escaping (_ result: Swift.Result<InsuranceCardScan.Response<T>, InsuranceCardScan.ErrorResponse>) -> Swift.Void) -> InsuranceCardScan.RequestTask
  public func addHeader(name: Swift.String, value: Swift.String) -> Self
  open func addCredential() -> Self
  @objc deinit
}
public protocol RequestBuilderFactory {
  func getNonDecodableBuilder<T>() -> InsuranceCardScan.RequestBuilder<T>.Type
  func getBuilder<T>() -> InsuranceCardScan.RequestBuilder<T>.Type where T : Swift.Decodable
}
public struct GenerateCardUploadUrlRequest : Swift.Codable, Swift.Hashable {
  public var orientation: InsuranceCardScan.ScanOrientation
  public var captureType: InsuranceCardScan.ScanCaptureType?
  public var metadata: InsuranceCardScan.ScanMetadata?
  public init(orientation: InsuranceCardScan.ScanOrientation, captureType: InsuranceCardScan.ScanCaptureType? = nil, metadata: InsuranceCardScan.ScanMetadata? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case orientation
    case captureType
    case metadata
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.GenerateCardUploadUrlRequest.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.GenerateCardUploadUrlRequest.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.GenerateCardUploadUrlRequest, b: InsuranceCardScan.GenerateCardUploadUrlRequest) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct PayerMatch : Swift.Codable, Swift.Hashable {
  public var cardscanPayerId: Swift.String?
  public var cardscanPayerName: Swift.String?
  public var score: Swift.String?
  public var changeHealthcare: [InsuranceCardScan.CHCPayerRecord]?
  public var custom: [InsuranceCardScan.CustomPayerRecord]?
  public var message: Swift.String?
  public init(cardscanPayerId: Swift.String? = nil, cardscanPayerName: Swift.String? = nil, score: Swift.String? = nil, changeHealthcare: [InsuranceCardScan.CHCPayerRecord]? = nil, custom: [InsuranceCardScan.CustomPayerRecord]? = nil, message: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case cardscanPayerId
    case cardscanPayerName
    case score
    case changeHealthcare
    case custom
    case message
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.PayerMatch.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.PayerMatch.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.PayerMatch, b: InsuranceCardScan.PayerMatch) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct CoPayment : Swift.Codable, Swift.Hashable {
  public var amount: Swift.String?
  public init(amount: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case amount
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.CoPayment.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.CoPayment.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.CoPayment, b: InsuranceCardScan.CoPayment) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public enum ScanOrientation : Swift.String, Swift.Codable, Swift.CaseIterable {
  case front
  case back
  public init?(rawValue: Swift.String)
  public typealias AllCases = [InsuranceCardScan.ScanOrientation]
  public typealias RawValue = Swift.String
  public static var allCases: [InsuranceCardScan.ScanOrientation] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct CreateEligibilityRequest : Swift.Codable, Swift.Hashable {
  public var eligibility: InsuranceCardScan.EligibilityInfo
  public var cardId: Foundation.UUID
  public init(eligibility: InsuranceCardScan.EligibilityInfo, cardId: Foundation.UUID)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case eligibility
    case cardId
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.CreateEligibilityRequest.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.CreateEligibilityRequest.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.CreateEligibilityRequest, b: InsuranceCardScan.CreateEligibilityRequest) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct EligibilityRequest : Swift.Codable {
  public var provider: InsuranceCardScan.ProviderDto
  public var subscriber: InsuranceCardScan.SubscriberDto
  public init(provider: InsuranceCardScan.ProviderDto, subscriber: InsuranceCardScan.SubscriberDto) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum EligibilityRequestError : Swift.Error, Foundation.LocalizedError {
  case invalidNPI
  case invalidDateOfBirth
  public var errorDescription: Swift.String? {
    get
  }
  public static func == (a: InsuranceCardScan.EligibilityRequestError, b: InsuranceCardScan.EligibilityRequestError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public typealias Eligibility = InsuranceCardScan.EligibilityApiResponse
public struct EligibilityWebsocketEvent : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case eligibility
    public init?(rawValue: Swift.String)
    public typealias AllCases = [InsuranceCardScan.EligibilityWebsocketEvent.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.EligibilityWebsocketEvent.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var eventId: Swift.String
  public var type: InsuranceCardScan.EligibilityWebsocketEvent.ModelType
  public var eligibilityId: Foundation.UUID
  public var state: InsuranceCardScan.CardState
  public var createdAt: Foundation.Date
  public var sessionId: Swift.String?
  public var error: InsuranceCardScan.WebsocketError?
  public var cardId: Foundation.UUID?
  public init(eventId: Swift.String, type: InsuranceCardScan.EligibilityWebsocketEvent.ModelType, eligibilityId: Foundation.UUID, state: InsuranceCardScan.CardState, createdAt: Foundation.Date, sessionId: Swift.String? = nil, error: InsuranceCardScan.WebsocketError? = nil, cardId: Foundation.UUID? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case eventId
    case type
    case eligibilityId
    case state
    case createdAt
    case sessionId
    case error
    case cardId
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.EligibilityWebsocketEvent.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.EligibilityWebsocketEvent.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.EligibilityWebsocketEvent, b: InsuranceCardScan.EligibilityWebsocketEvent) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct SubscriberDto : Swift.Codable, Swift.Hashable {
  public var firstName: Swift.String
  public var lastName: Swift.String
  public var dateOfBirth: Swift.String
  public init(firstName: Swift.String, lastName: Swift.String, dateOfBirth: Swift.String)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case firstName
    case lastName
    case dateOfBirth
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.SubscriberDto.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.SubscriberDto.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.SubscriberDto, b: InsuranceCardScan.SubscriberDto) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class OpenISO8601DateFormatter : Foundation.DateFormatter {
  @objc override dynamic public func date(from string: Swift.String) -> Foundation.Date?
  @objc deinit
}
public struct ScanMetadataVideoBackground : Swift.Codable, Swift.Hashable {
  public var width: Swift.Int?
  public var height: Swift.Int?
  public init(width: Swift.Int? = nil, height: Swift.Int? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case width
    case height
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.ScanMetadataVideoBackground.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.ScanMetadataVideoBackground.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.ScanMetadataVideoBackground, b: InsuranceCardScan.ScanMetadataVideoBackground) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct ResponseMetadata : Swift.Codable, Swift.Hashable {
  public var nextCursor: Swift.String?
  public var limit: Swift.Int?
  public var total: Swift.Int?
  public init(nextCursor: Swift.String? = nil, limit: Swift.Int? = nil, total: Swift.Int? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case nextCursor
    case limit
    case total
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.ResponseMetadata.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.ResponseMetadata.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.ResponseMetadata, b: InsuranceCardScan.ResponseMetadata) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct ScanMetadataGuides : Swift.Codable, Swift.Hashable {
  public var x: Swift.Int?
  public var y: Swift.Int?
  public var width: Swift.Int?
  public var height: Swift.Int?
  public init(x: Swift.Int? = nil, y: Swift.Int? = nil, width: Swift.Int? = nil, height: Swift.Int? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case x
    case y
    case width
    case height
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.ScanMetadataGuides.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.ScanMetadataGuides.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.ScanMetadataGuides, b: InsuranceCardScan.ScanMetadataGuides) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct CustomPayerRecord : Swift.Codable, Swift.Hashable {
  public var customPayerId: Swift.String?
  public var customPayerName: Swift.String?
  public var customPayerNameAlt: Swift.String?
  public var score: Swift.String?
  public var source: Swift.String?
  public init(customPayerId: Swift.String? = nil, customPayerName: Swift.String? = nil, customPayerNameAlt: Swift.String? = nil, score: Swift.String? = nil, source: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case customPayerId
    case customPayerName
    case customPayerNameAlt
    case score
    case source
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.CustomPayerRecord.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.CustomPayerRecord.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.CustomPayerRecord, b: InsuranceCardScan.CustomPayerRecord) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public enum AddressType : Swift.String, Swift.Codable, Swift.CaseIterable {
  case medicalClaimsAddress
  case pharmacyClaimsAddress
  case visionClaimsAddress
  case dentalClaimsAddress
  case appealsAddress
  case pcpAddress
  case generalAddress
  public init?(rawValue: Swift.String)
  public typealias AllCases = [InsuranceCardScan.AddressType]
  public typealias RawValue = Swift.String
  public static var allCases: [InsuranceCardScan.AddressType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct CHCPayerRecord : Swift.Codable, Swift.Hashable {
  public var chcPayerId: Swift.String?
  public var chcPayerName: Swift.String?
  public var score: Swift.String?
  public init(chcPayerId: Swift.String? = nil, chcPayerName: Swift.String? = nil, score: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case chcPayerId
    case chcPayerName
    case score
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.CHCPayerRecord.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.CHCPayerRecord.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.CHCPayerRecord, b: InsuranceCardScan.CHCPayerRecord) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public enum CardState : Swift.String, Swift.Codable, Swift.CaseIterable {
  case pending
  case processing
  case frontsideProcessing
  case frontsideFailed
  case backsideProcessing
  case backsideFailed
  case postProcessing
  case completed
  case enriched
  case error
  case unknown
  public init?(rawValue: Swift.String)
  public typealias AllCases = [InsuranceCardScan.CardState]
  public typealias RawValue = Swift.String
  public static var allCases: [InsuranceCardScan.CardState] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct CardApiResponseImagesFront : Swift.Codable, Swift.Hashable {
  public var url: Swift.String?
  public init(url: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case url
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.CardApiResponseImagesFront.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.CardApiResponseImagesFront.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.CardApiResponseImagesFront, b: InsuranceCardScan.CardApiResponseImagesFront) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct WebhookEligibilityCreatedEvent : Swift.Codable, Swift.Hashable {
  public var eligibilityId: Foundation.UUID
  public var cardId: Foundation.UUID
  public var createdAt: Foundation.Date
  public var deleted: Swift.Bool
  public var sessionId: Swift.String
  public var type: Swift.String
  public var updatedAt: Foundation.Date
  public var userId: Swift.String
  public init(eligibilityId: Foundation.UUID, cardId: Foundation.UUID, createdAt: Foundation.Date, deleted: Swift.Bool, sessionId: Swift.String, type: Swift.String, updatedAt: Foundation.Date, userId: Swift.String)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case eligibilityId
    case cardId
    case createdAt
    case deleted
    case sessionId
    case type
    case updatedAt
    case userId
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.WebhookEligibilityCreatedEvent.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.WebhookEligibilityCreatedEvent.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.WebhookEligibilityCreatedEvent, b: InsuranceCardScan.WebhookEligibilityCreatedEvent) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct CardApiResponseImagesBack : Swift.Codable, Swift.Hashable {
  public var url: Swift.String?
  public init(url: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case url
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.CardApiResponseImagesBack.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.CardApiResponseImagesBack.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.CardApiResponseImagesBack, b: InsuranceCardScan.CardApiResponseImagesBack) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct ScanMetadataCaptureScoreScoresInner : Swift.Codable, Swift.Hashable {
  public var score: Swift.Double?
  public var laplacian: Swift.Double?
  public init(score: Swift.Double? = nil, laplacian: Swift.Double? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case score
    case laplacian
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.ScanMetadataCaptureScoreScoresInner.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.ScanMetadataCaptureScoreScoresInner.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.ScanMetadataCaptureScoreScoresInner, b: InsuranceCardScan.ScanMetadataCaptureScoreScoresInner) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct CardScanError : Swift.Codable, Swift.Error {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class CardScanAPI {
  @discardableResult
  open class func cardPerformance(cardId: Foundation.UUID, body: InsuranceCardScan.AnyCodable? = nil, apiResponseQueue: Dispatch.DispatchQueue = CardScanClientAPI.apiResponseQueue, completion: @escaping ((_ data: InsuranceCardScan.CardPerformance200Response?, _ error: (any Swift.Error)?) -> Swift.Void)) -> InsuranceCardScan.RequestTask
  open class func cardPerformanceWithRequestBuilder(cardId: Foundation.UUID, body: InsuranceCardScan.AnyCodable? = nil) -> InsuranceCardScan.RequestBuilder<InsuranceCardScan.CardPerformance200Response>
  @discardableResult
  open class func createCard(createCardRequest: InsuranceCardScan.CreateCardRequest? = nil, apiResponseQueue: Dispatch.DispatchQueue = CardScanClientAPI.apiResponseQueue, completion: @escaping ((_ data: InsuranceCardScan.CardApiResponse?, _ error: (any Swift.Error)?) -> Swift.Void)) -> InsuranceCardScan.RequestTask
  open class func createCardWithRequestBuilder(createCardRequest: InsuranceCardScan.CreateCardRequest? = nil) -> InsuranceCardScan.RequestBuilder<InsuranceCardScan.CardApiResponse>
  @discardableResult
  open class func createEligibility(createEligibilityRequest: InsuranceCardScan.CreateEligibilityRequest? = nil, apiResponseQueue: Dispatch.DispatchQueue = CardScanClientAPI.apiResponseQueue, completion: @escaping ((_ data: InsuranceCardScan.EligibilityApiResponse?, _ error: (any Swift.Error)?) -> Swift.Void)) -> InsuranceCardScan.RequestTask
  open class func createEligibilityWithRequestBuilder(createEligibilityRequest: InsuranceCardScan.CreateEligibilityRequest? = nil) -> InsuranceCardScan.RequestBuilder<InsuranceCardScan.EligibilityApiResponse>
  @discardableResult
  open class func deleteCardById(cardId: Foundation.UUID, apiResponseQueue: Dispatch.DispatchQueue = CardScanClientAPI.apiResponseQueue, completion: @escaping ((_ data: Swift.Void?, _ error: (any Swift.Error)?) -> Swift.Void)) -> InsuranceCardScan.RequestTask
  open class func deleteCardByIdWithRequestBuilder(cardId: Foundation.UUID) -> InsuranceCardScan.RequestBuilder<Swift.Void>
  @discardableResult
  open class func directUpload(orientation: InsuranceCardScan.ScanOrientation, captureType: InsuranceCardScan.ScanCaptureType, cardId: Foundation.UUID, directUploadRequest: InsuranceCardScan.DirectUploadRequest? = nil, apiResponseQueue: Dispatch.DispatchQueue = CardScanClientAPI.apiResponseQueue, completion: @escaping ((_ data: InsuranceCardScan.DirectUpload200Response?, _ error: (any Swift.Error)?) -> Swift.Void)) -> InsuranceCardScan.RequestTask
  open class func directUploadWithRequestBuilder(orientation: InsuranceCardScan.ScanOrientation, captureType: InsuranceCardScan.ScanCaptureType, cardId: Foundation.UUID, directUploadRequest: InsuranceCardScan.DirectUploadRequest? = nil) -> InsuranceCardScan.RequestBuilder<InsuranceCardScan.DirectUpload200Response>
  @discardableResult
  open class func generateCardUploadUrl(cardId: Foundation.UUID, expiration: Swift.Int? = nil, generateCardUploadUrlRequest: InsuranceCardScan.GenerateCardUploadUrlRequest? = nil, apiResponseQueue: Dispatch.DispatchQueue = CardScanClientAPI.apiResponseQueue, completion: @escaping ((_ data: InsuranceCardScan.GenerateCardUploadUrl200Response?, _ error: (any Swift.Error)?) -> Swift.Void)) -> InsuranceCardScan.RequestTask
  open class func generateCardUploadUrlWithRequestBuilder(cardId: Foundation.UUID, expiration: Swift.Int? = nil, generateCardUploadUrlRequest: InsuranceCardScan.GenerateCardUploadUrlRequest? = nil) -> InsuranceCardScan.RequestBuilder<InsuranceCardScan.GenerateCardUploadUrl200Response>
  @discardableResult
  open class func generateMagicLink(apiResponseQueue: Dispatch.DispatchQueue = CardScanClientAPI.apiResponseQueue, completion: @escaping ((_ data: InsuranceCardScan.GenerateMagicLink200Response?, _ error: (any Swift.Error)?) -> Swift.Void)) -> InsuranceCardScan.RequestTask
  open class func generateMagicLinkWithRequestBuilder() -> InsuranceCardScan.RequestBuilder<InsuranceCardScan.GenerateMagicLink200Response>
  @discardableResult
  open class func generateUploadUrl(expiration: Swift.Int, apiResponseQueue: Dispatch.DispatchQueue = CardScanClientAPI.apiResponseQueue, completion: @escaping ((_ data: InsuranceCardScan.GenerateCardUploadUrl200Response?, _ error: (any Swift.Error)?) -> Swift.Void)) -> InsuranceCardScan.RequestTask
  open class func generateUploadUrlWithRequestBuilder(expiration: Swift.Int) -> InsuranceCardScan.RequestBuilder<InsuranceCardScan.GenerateCardUploadUrl200Response>
  @discardableResult
  open class func getAccessToken(userId: Swift.String? = nil, apiResponseQueue: Dispatch.DispatchQueue = CardScanClientAPI.apiResponseQueue, completion: @escaping ((_ data: InsuranceCardScan.GetAccessToken200Response?, _ error: (any Swift.Error)?) -> Swift.Void)) -> InsuranceCardScan.RequestTask
  open class func getAccessTokenWithRequestBuilder(userId: Swift.String? = nil) -> InsuranceCardScan.RequestBuilder<InsuranceCardScan.GetAccessToken200Response>
  @discardableResult
  open class func getCardById(cardId: Foundation.UUID, apiResponseQueue: Dispatch.DispatchQueue = CardScanClientAPI.apiResponseQueue, completion: @escaping ((_ data: InsuranceCardScan.CardApiResponse?, _ error: (any Swift.Error)?) -> Swift.Void)) -> InsuranceCardScan.RequestTask
  open class func getCardByIdWithRequestBuilder(cardId: Foundation.UUID) -> InsuranceCardScan.RequestBuilder<InsuranceCardScan.CardApiResponse>
  @discardableResult
  open class func getEligibilityById(eligibilityId: Swift.String, apiResponseQueue: Dispatch.DispatchQueue = CardScanClientAPI.apiResponseQueue, completion: @escaping ((_ data: InsuranceCardScan.EligibilityApiResponse?, _ error: (any Swift.Error)?) -> Swift.Void)) -> InsuranceCardScan.RequestTask
  open class func getEligibilityByIdWithRequestBuilder(eligibilityId: Swift.String) -> InsuranceCardScan.RequestBuilder<InsuranceCardScan.EligibilityApiResponse>
  @discardableResult
  open class func listCards(limit: Swift.Int? = nil, cursor: Swift.String? = nil, apiResponseQueue: Dispatch.DispatchQueue = CardScanClientAPI.apiResponseQueue, completion: @escaping ((_ data: InsuranceCardScan.SearchCards200Response?, _ error: (any Swift.Error)?) -> Swift.Void)) -> InsuranceCardScan.RequestTask
  open class func listCardsWithRequestBuilder(limit: Swift.Int? = nil, cursor: Swift.String? = nil) -> InsuranceCardScan.RequestBuilder<InsuranceCardScan.SearchCards200Response>
  @discardableResult
  open class func listEligibility(limit: Swift.Int? = nil, cursor: Swift.String? = nil, apiResponseQueue: Dispatch.DispatchQueue = CardScanClientAPI.apiResponseQueue, completion: @escaping ((_ data: InsuranceCardScan.ListEligibility200Response?, _ error: (any Swift.Error)?) -> Swift.Void)) -> InsuranceCardScan.RequestTask
  open class func listEligibilityWithRequestBuilder(limit: Swift.Int? = nil, cursor: Swift.String? = nil) -> InsuranceCardScan.RequestBuilder<InsuranceCardScan.ListEligibility200Response>
  @discardableResult
  open class func searchCards(query: Swift.String, limit: Swift.Int? = nil, cursor: Swift.String? = nil, apiResponseQueue: Dispatch.DispatchQueue = CardScanClientAPI.apiResponseQueue, completion: @escaping ((_ data: InsuranceCardScan.SearchCards200Response?, _ error: (any Swift.Error)?) -> Swift.Void)) -> InsuranceCardScan.RequestTask
  open class func searchCardsWithRequestBuilder(query: Swift.String, limit: Swift.Int? = nil, cursor: Swift.String? = nil) -> InsuranceCardScan.RequestBuilder<InsuranceCardScan.SearchCards200Response>
  @discardableResult
  open class func setScanMetadata(scanId: Foundation.UUID, body: InsuranceCardScan.AnyCodable? = nil, apiResponseQueue: Dispatch.DispatchQueue = CardScanClientAPI.apiResponseQueue, completion: @escaping ((_ data: Swift.Void?, _ error: (any Swift.Error)?) -> Swift.Void)) -> InsuranceCardScan.RequestTask
  open class func setScanMetadataWithRequestBuilder(scanId: Foundation.UUID, body: InsuranceCardScan.AnyCodable? = nil) -> InsuranceCardScan.RequestBuilder<Swift.Void>
  @discardableResult
  open class func validateMagicLink(token: Swift.String, apiResponseQueue: Dispatch.DispatchQueue = CardScanClientAPI.apiResponseQueue, completion: @escaping ((_ data: InsuranceCardScan.ValidateMagicLink200Response?, _ error: (any Swift.Error)?) -> Swift.Void)) -> InsuranceCardScan.RequestTask
  open class func validateMagicLinkWithRequestBuilder(token: Swift.String) -> InsuranceCardScan.RequestBuilder<InsuranceCardScan.ValidateMagicLink200Response>
  @objc deinit
}
public enum ScanCaptureType : Swift.String, Swift.Codable, Swift.CaseIterable {
  case manual
  case automatic
  case selectedfile
  case api
  public init?(rawValue: Swift.String)
  public typealias AllCases = [InsuranceCardScan.ScanCaptureType]
  public typealias RawValue = Swift.String
  public static var allCases: [InsuranceCardScan.ScanCaptureType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers open class JSONEncodingHelper {
  open class func encodingParameters<T>(forEncodableObject encodableObj: T?) -> [Swift.String : Any]? where T : Swift.Encodable
  open class func encodingParameters(forEncodableObject encodableObj: Any?) -> [Swift.String : Any]?
  @objc deinit
}
public struct ModelError : Swift.Codable, Swift.Hashable {
  public var message: Swift.String
  public var type: Swift.String
  public var code: Swift.String
  @available(*, deprecated, message: "This property is deprecated.")
  public var error: Swift.String?
  public init(message: Swift.String, type: Swift.String, code: Swift.String, error: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case message
    case type
    case code
    case error
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.ModelError.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.ModelError.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.ModelError, b: InsuranceCardScan.ModelError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct Deductible : Swift.Codable, Swift.Hashable {
  public var totalAmount: Swift.String?
  public var remainingAmount: Swift.String?
  public init(totalAmount: Swift.String? = nil, remainingAmount: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case totalAmount
    case remainingAmount
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.Deductible.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.Deductible.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.Deductible, b: InsuranceCardScan.Deductible) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct CardPerformance200Response : Swift.Codable, Swift.Hashable {
  public var message: Swift.String?
  public init(message: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case message
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.CardPerformance200Response.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.CardPerformance200Response.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.CardPerformance200Response, b: InsuranceCardScan.CardPerformance200Response) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class Configuration {
  public static var successfulStatusCodeRange: Swift.Range<Swift.Int>
  @objc deinit
}
public struct EligibilityApiResponse : Swift.Codable, Swift.Hashable {
  public enum State : Swift.String, Swift.Codable, Swift.CaseIterable {
    case completed
    case processing
    case error
    public init?(rawValue: Swift.String)
    public typealias AllCases = [InsuranceCardScan.EligibilityApiResponse.State]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.EligibilityApiResponse.State] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var eligibilityId: Foundation.UUID
  public var state: InsuranceCardScan.EligibilityApiResponse.State
  public var cardId: Foundation.UUID
  public var eligibilityRequest: InsuranceCardScan.EligibilityApiResponseEligibilityRequest?
  public var eligibilityResponse: [Swift.String : InsuranceCardScan.AnyCodable]?
  public var eligibilitySummarizedResponse: InsuranceCardScan.EligibilitySummarizedResponse?
  public var error: InsuranceCardScan.ModelError?
  public var createdAt: Foundation.Date
  public init(eligibilityId: Foundation.UUID, state: InsuranceCardScan.EligibilityApiResponse.State, cardId: Foundation.UUID, eligibilityRequest: InsuranceCardScan.EligibilityApiResponseEligibilityRequest? = nil, eligibilityResponse: [Swift.String : InsuranceCardScan.AnyCodable]? = nil, eligibilitySummarizedResponse: InsuranceCardScan.EligibilitySummarizedResponse? = nil, error: InsuranceCardScan.ModelError? = nil, createdAt: Foundation.Date)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case eligibilityId
    case state
    case cardId
    case eligibilityRequest
    case eligibilityResponse
    case eligibilitySummarizedResponse
    case error
    case createdAt
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.EligibilityApiResponse.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.EligibilityApiResponse.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.EligibilityApiResponse, b: InsuranceCardScan.EligibilityApiResponse) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct CardWebsocketEvent : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case card
    public init?(rawValue: Swift.String)
    public typealias AllCases = [InsuranceCardScan.CardWebsocketEvent.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.CardWebsocketEvent.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var eventId: Swift.String
  public var type: InsuranceCardScan.CardWebsocketEvent.ModelType
  public var cardId: Foundation.UUID
  public var state: InsuranceCardScan.CardState
  public var createdAt: Foundation.Date
  public var sessionId: Swift.String?
  public var error: InsuranceCardScan.WebsocketError?
  public init(eventId: Swift.String, type: InsuranceCardScan.CardWebsocketEvent.ModelType, cardId: Foundation.UUID, state: InsuranceCardScan.CardState, createdAt: Foundation.Date, sessionId: Swift.String? = nil, error: InsuranceCardScan.WebsocketError? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case eventId
    case type
    case cardId
    case state
    case createdAt
    case sessionId
    case error
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.CardWebsocketEvent.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.CardWebsocketEvent.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.CardWebsocketEvent, b: InsuranceCardScan.CardWebsocketEvent) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct EligibilityError : Swift.Codable, Swift.Hashable {
  public var field: Swift.String?
  public var code: Swift.String?
  public var description: Swift.String?
  public var followupAction: Swift.String?
  public var location: Swift.String?
  public var possibleResolutions: Swift.String?
  public init(field: Swift.String? = nil, code: Swift.String? = nil, description: Swift.String? = nil, followupAction: Swift.String? = nil, location: Swift.String? = nil, possibleResolutions: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case field
    case code
    case description
    case followupAction
    case location
    case possibleResolutions
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.EligibilityError.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.EligibilityError.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.EligibilityError, b: InsuranceCardScan.EligibilityError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@frozen public struct AnyEncodable : Swift.Encodable {
  public let value: Any
  public init<T>(_ value: T?)
}
@usableFromInline
internal protocol _AnyEncodable {
  var value: Any { get }
  init<T>(_ value: T?)
}
extension InsuranceCardScan.AnyEncodable : InsuranceCardScan._AnyEncodable {
}
extension InsuranceCardScan._AnyEncodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
extension InsuranceCardScan.AnyEncodable : Swift.Equatable {
  public static func == (lhs: InsuranceCardScan.AnyEncodable, rhs: InsuranceCardScan.AnyEncodable) -> Swift.Bool
}
extension InsuranceCardScan.AnyEncodable : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension InsuranceCardScan.AnyEncodable : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension InsuranceCardScan.AnyEncodable : Swift.ExpressibleByNilLiteral {
}
extension InsuranceCardScan.AnyEncodable : Swift.ExpressibleByBooleanLiteral {
  public typealias BooleanLiteralType = Swift.Bool
}
extension InsuranceCardScan.AnyEncodable : Swift.ExpressibleByIntegerLiteral {
  public typealias IntegerLiteralType = Swift.Int
}
extension InsuranceCardScan.AnyEncodable : Swift.ExpressibleByFloatLiteral {
  public typealias FloatLiteralType = Swift.Double
}
extension InsuranceCardScan.AnyEncodable : Swift.ExpressibleByStringLiteral {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension InsuranceCardScan.AnyEncodable : Swift.ExpressibleByStringInterpolation {
  public typealias StringInterpolation = Swift.DefaultStringInterpolation
}
extension InsuranceCardScan.AnyEncodable : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = Any
}
extension InsuranceCardScan.AnyEncodable : Swift.ExpressibleByDictionaryLiteral {
  public typealias Key = Swift.AnyHashable
  public typealias Value = Any
}
extension InsuranceCardScan._AnyEncodable {
  public init(nilLiteral _: ())
  public init(booleanLiteral value: Swift.Bool)
  public init(integerLiteral value: Swift.Int)
  public init(floatLiteral value: Swift.Double)
  public init(extendedGraphemeClusterLiteral value: Swift.String)
  public init(stringLiteral value: Swift.String)
  public init(arrayLiteral elements: Any...)
  public init(dictionaryLiteral elements: (Swift.AnyHashable, Any)...)
}
extension InsuranceCardScan.AnyEncodable : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct PayerDetails : Swift.Codable, Swift.Hashable {
  public var payerName: Swift.String?
  public var address: InsuranceCardScan.Address?
  public var payerUrl: Swift.String?
  public init(payerName: Swift.String? = nil, address: InsuranceCardScan.Address? = nil, payerUrl: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case payerName
    case address
    case payerUrl
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.PayerDetails.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.PayerDetails.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.PayerDetails, b: InsuranceCardScan.PayerDetails) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct CopayResultInner : Swift.Codable, Swift.Hashable {
  public var value: Swift.String?
  public var scores: [Swift.String]?
  public var service: InsuranceCardScan.CopayDeductibleService?
  public var category: InsuranceCardScan.CopayCategory?
  public init(value: Swift.String? = nil, scores: [Swift.String]? = nil, service: InsuranceCardScan.CopayDeductibleService? = nil, category: InsuranceCardScan.CopayCategory? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case value
    case scores
    case service
    case category
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.CopayResultInner.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.CopayResultInner.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.CopayResultInner, b: InsuranceCardScan.CopayResultInner) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct CardApiResponseImages : Swift.Codable, Swift.Hashable {
  public var front: InsuranceCardScan.CardApiResponseImagesFront?
  public var back: InsuranceCardScan.CardApiResponseImagesBack?
  public init(front: InsuranceCardScan.CardApiResponseImagesFront? = nil, back: InsuranceCardScan.CardApiResponseImagesBack? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case front
    case back
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.CardApiResponseImages.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.CardApiResponseImages.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.CardApiResponseImages, b: InsuranceCardScan.CardApiResponseImages) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct CardResponseMetadata : Swift.Codable, Swift.Hashable {
  public var insuranceScanVersion: Swift.String?
  public var payerMatchVersion: Swift.String?
  public init(insuranceScanVersion: Swift.String? = nil, payerMatchVersion: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case insuranceScanVersion
    case payerMatchVersion
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.CardResponseMetadata.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.CardResponseMetadata.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.CardResponseMetadata, b: InsuranceCardScan.CardResponseMetadata) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct PlanDetails : Swift.Codable, Swift.Hashable {
  public var planNumber: Swift.String?
  public var groupName: Swift.String?
  public var groupNumber: Swift.String?
  public var planStartDate: Foundation.Date?
  public var planEndDate: Foundation.Date?
  public var planEligibilityStartDate: Foundation.Date?
  public var planEligibilityEndDate: Foundation.Date?
  public var planName: Swift.String?
  public var planActive: Swift.Bool?
  public init(planNumber: Swift.String? = nil, groupName: Swift.String? = nil, groupNumber: Swift.String? = nil, planStartDate: Foundation.Date? = nil, planEndDate: Foundation.Date? = nil, planEligibilityStartDate: Foundation.Date? = nil, planEligibilityEndDate: Foundation.Date? = nil, planName: Swift.String? = nil, planActive: Swift.Bool? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case planNumber
    case groupName
    case groupNumber
    case planStartDate
    case planEndDate
    case planEligibilityStartDate
    case planEligibilityEndDate
    case planName
    case planActive
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.PlanDetails.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.PlanDetails.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.PlanDetails, b: InsuranceCardScan.PlanDetails) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct EligibilityApiResponseEligibilityRequestSubscriber : Swift.Codable, Swift.Hashable {
  public var firstName: Swift.String?
  public var lastName: Swift.String?
  public var memberId: Swift.String?
  public var dateOfBirth: Swift.String?
  public init(firstName: Swift.String? = nil, lastName: Swift.String? = nil, memberId: Swift.String? = nil, dateOfBirth: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case firstName
    case lastName
    case memberId
    case dateOfBirth
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.EligibilityApiResponseEligibilityRequestSubscriber.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.EligibilityApiResponseEligibilityRequestSubscriber.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.EligibilityApiResponseEligibilityRequestSubscriber, b: InsuranceCardScan.EligibilityApiResponseEligibilityRequestSubscriber) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct WebhookCardCreatedEvent : Swift.Codable, Swift.Hashable {
  public var cardId: Foundation.UUID
  public var configuration: InsuranceCardScan.WebhookCardCompletedEventConfiguration
  public var createdAt: Foundation.Date
  public var deleted: Swift.Bool
  public var sessionId: Swift.String
  public var type: Swift.String
  public var updatedAt: Foundation.Date
  public var userId: Swift.String
  public init(cardId: Foundation.UUID, configuration: InsuranceCardScan.WebhookCardCompletedEventConfiguration, createdAt: Foundation.Date, deleted: Swift.Bool, sessionId: Swift.String, type: Swift.String, updatedAt: Foundation.Date, userId: Swift.String)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case cardId
    case configuration
    case createdAt
    case deleted
    case sessionId
    case type
    case updatedAt
    case userId
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.WebhookCardCreatedEvent.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.WebhookCardCreatedEvent.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.WebhookCardCreatedEvent, b: InsuranceCardScan.WebhookCardCreatedEvent) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct WebhookCardErrorEvent : Swift.Codable, Swift.Hashable {
  public var cardId: Foundation.UUID
  public var createdAt: Foundation.Date
  public var deleted: Swift.Bool
  public var error: InsuranceCardScan.WebhookCardErrorEventError
  public var sessionId: Swift.String
  public var type: Swift.String
  public var updatedAt: Foundation.Date
  public var userId: Swift.String
  public init(cardId: Foundation.UUID, createdAt: Foundation.Date, deleted: Swift.Bool, error: InsuranceCardScan.WebhookCardErrorEventError, sessionId: Swift.String, type: Swift.String, updatedAt: Foundation.Date, userId: Swift.String)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case cardId
    case createdAt
    case deleted
    case error
    case sessionId
    case type
    case updatedAt
    case userId
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.WebhookCardErrorEvent.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.WebhookCardErrorEvent.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.WebhookCardErrorEvent, b: InsuranceCardScan.WebhookCardErrorEvent) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct ScanMetadata : Swift.Codable, Swift.Hashable {
  public enum CaptureType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case automatic
    case manual
    public init?(rawValue: Swift.String)
    public typealias AllCases = [InsuranceCardScan.ScanMetadata.CaptureType]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.ScanMetadata.CaptureType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var captureType: InsuranceCardScan.ScanMetadata.CaptureType?
  public var guides: InsuranceCardScan.ScanMetadataGuides?
  public var captureCanvas: InsuranceCardScan.ScanMetadataCaptureCanvas?
  public var videoBackground: InsuranceCardScan.ScanMetadataVideoBackground?
  public var windowInner: InsuranceCardScan.ScanMetadataWindowInner?
  public var mlThreshold: Swift.Double?
  public var laplacianThreshold: Swift.Double?
  public var packageName: Swift.String?
  public var packageVersion: Swift.String?
  public var videoTrack: InsuranceCardScan.ScanMetadataVideoTrack?
  public var cameraCapabilities: InsuranceCardScan.ScanMetadataCameraCapabilities?
  public var captureScore: InsuranceCardScan.ScanMetadataCaptureScore?
  public init(captureType: InsuranceCardScan.ScanMetadata.CaptureType? = nil, guides: InsuranceCardScan.ScanMetadataGuides? = nil, captureCanvas: InsuranceCardScan.ScanMetadataCaptureCanvas? = nil, videoBackground: InsuranceCardScan.ScanMetadataVideoBackground? = nil, windowInner: InsuranceCardScan.ScanMetadataWindowInner? = nil, mlThreshold: Swift.Double? = nil, laplacianThreshold: Swift.Double? = nil, packageName: Swift.String? = nil, packageVersion: Swift.String? = nil, videoTrack: InsuranceCardScan.ScanMetadataVideoTrack? = nil, cameraCapabilities: InsuranceCardScan.ScanMetadataCameraCapabilities? = nil, captureScore: InsuranceCardScan.ScanMetadataCaptureScore? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case captureType
    case guides
    case captureCanvas
    case videoBackground
    case windowInner
    case mlThreshold
    case laplacianThreshold
    case packageName
    case packageVersion
    case videoTrack
    case cameraCapabilities
    case captureScore
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.ScanMetadata.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.ScanMetadata.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.ScanMetadata, b: InsuranceCardScan.ScanMetadata) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public enum NullEncodable<Wrapped> : Swift.Hashable where Wrapped : Swift.Hashable {
  case encodeNothing
  case encodeNull
  case encodeValue(Wrapped)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.NullEncodable<Wrapped>, b: InsuranceCardScan.NullEncodable<Wrapped>) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension InsuranceCardScan.NullEncodable : Swift.Codable where Wrapped : Swift.Decodable, Wrapped : Swift.Encodable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum ErrorResponse : Swift.Error {
  case error(Swift.Int, Foundation.Data?, Foundation.URLResponse?, any Swift.Error)
}
public enum DownloadException : Swift.Error {
  case responseDataMissing
  case responseFailed
  case requestMissing
  case requestMissingPath
  case requestMissingURL
  public static func == (a: InsuranceCardScan.DownloadException, b: InsuranceCardScan.DownloadException) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum DecodableRequestBuilderError : Swift.Error {
  case emptyDataResponse
  case nilHTTPResponse
  case unsuccessfulHTTPStatusCode
  case jsonDecoding(Swift.DecodingError)
  case generalError(any Swift.Error)
}
open class Response<T> {
  final public let statusCode: Swift.Int
  final public let header: [Swift.String : Swift.String]
  final public let body: T
  final public let bodyData: Foundation.Data?
  public init(statusCode: Swift.Int, header: [Swift.String : Swift.String], body: T, bodyData: Foundation.Data?)
  convenience public init(response: Foundation.HTTPURLResponse, body: T, bodyData: Foundation.Data?)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class RequestTask {
  final public func cancel()
  @objc deinit
}
public struct APIHelper {
  public static func rejectNil(_ source: [Swift.String : Any?]) -> [Swift.String : Any]?
  public static func rejectNilHeaders(_ source: [Swift.String : Any?]) -> [Swift.String : Swift.String]
  public static func convertBoolToString(_ source: [Swift.String : Any]?) -> [Swift.String : Any]?
  public static func convertAnyToString(_ value: Any?) -> Swift.String?
  public static func mapValueToPathItem(_ source: Any) -> Any
  public static func mapValuesToQueryItems(_ source: [Swift.String : (wrappedValue: Any?, isExplode: Swift.Bool)]) -> [Foundation.URLQueryItem]?
  public static func mapValuesToQueryItems(_ source: [Swift.String : Any?]) -> [Foundation.URLQueryItem]?
}
public struct GetAccessToken200Response : Swift.Codable, Swift.Hashable {
  public var token: Swift.String
  public var identityId: Swift.String
  public var sessionId: Swift.String?
  public init(token: Swift.String, identityId: Swift.String, sessionId: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case token
    case identityId
    case sessionId
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.GetAccessToken200Response.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.GetAccessToken200Response.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.GetAccessToken200Response, b: InsuranceCardScan.GetAccessToken200Response) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct MatchScore : Swift.Codable, Swift.Hashable {
  public var value: Swift.String?
  public var scores: [Swift.String]?
  public init(value: Swift.String? = nil, scores: [Swift.String]? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case value
    case scores
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.MatchScore.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.MatchScore.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.MatchScore, b: InsuranceCardScan.MatchScore) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct ScanMetadataCameraCapabilities : Swift.Codable, Swift.Hashable {
  public var aspectRatio: InsuranceCardScan.ScanMetadataCameraCapabilitiesAspectRatio?
  public var deviceId: Swift.String?
  public var facingMode: [Swift.String]?
  public var frameRate: InsuranceCardScan.ScanMetadataCameraCapabilitiesAspectRatio?
  public var groupId: Swift.String?
  public var height: InsuranceCardScan.ScanMetadataCameraCapabilitiesAspectRatio?
  public var resizeMode: [Swift.String]?
  public var width: InsuranceCardScan.ScanMetadataCameraCapabilitiesAspectRatio?
  public init(aspectRatio: InsuranceCardScan.ScanMetadataCameraCapabilitiesAspectRatio? = nil, deviceId: Swift.String? = nil, facingMode: [Swift.String]? = nil, frameRate: InsuranceCardScan.ScanMetadataCameraCapabilitiesAspectRatio? = nil, groupId: Swift.String? = nil, height: InsuranceCardScan.ScanMetadataCameraCapabilitiesAspectRatio? = nil, resizeMode: [Swift.String]? = nil, width: InsuranceCardScan.ScanMetadataCameraCapabilitiesAspectRatio? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case aspectRatio
    case deviceId
    case facingMode
    case frameRate
    case groupId
    case height
    case resizeMode
    case width
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.ScanMetadataCameraCapabilities.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.ScanMetadataCameraCapabilities.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.ScanMetadataCameraCapabilities, b: InsuranceCardScan.ScanMetadataCameraCapabilities) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct CoverageSummary : Swift.Codable, Swift.Hashable {
  public var individualDeductibleInNetwork: InsuranceCardScan.Deductible?
  public var individualDeductibleOutNetwork: InsuranceCardScan.Deductible?
  public var individualOopInNetwork: InsuranceCardScan.OOP?
  public var individualOopOutNetwork: InsuranceCardScan.OOP?
  public var familyDeductibleInNetwork: InsuranceCardScan.Deductible?
  public var familyDeductibleOutNetwork: InsuranceCardScan.Deductible?
  public var familyOopInNetwork: InsuranceCardScan.OOP?
  public var familyOopOutNetwork: InsuranceCardScan.OOP?
  public var coInsuranceInNetwork: InsuranceCardScan.CoInsurance?
  public var coInsuranceOutNetwork: InsuranceCardScan.CoInsurance?
  public var coPaymentOutNetwork: InsuranceCardScan.CoPayment?
  public var coPaymentInNetwork: InsuranceCardScan.CoPayment?
  public init(individualDeductibleInNetwork: InsuranceCardScan.Deductible? = nil, individualDeductibleOutNetwork: InsuranceCardScan.Deductible? = nil, individualOopInNetwork: InsuranceCardScan.OOP? = nil, individualOopOutNetwork: InsuranceCardScan.OOP? = nil, familyDeductibleInNetwork: InsuranceCardScan.Deductible? = nil, familyDeductibleOutNetwork: InsuranceCardScan.Deductible? = nil, familyOopInNetwork: InsuranceCardScan.OOP? = nil, familyOopOutNetwork: InsuranceCardScan.OOP? = nil, coInsuranceInNetwork: InsuranceCardScan.CoInsurance? = nil, coInsuranceOutNetwork: InsuranceCardScan.CoInsurance? = nil, coPaymentOutNetwork: InsuranceCardScan.CoPayment? = nil, coPaymentInNetwork: InsuranceCardScan.CoPayment? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case individualDeductibleInNetwork
    case individualDeductibleOutNetwork
    case individualOopInNetwork
    case individualOopOutNetwork
    case familyDeductibleInNetwork
    case familyDeductibleOutNetwork
    case familyOopInNetwork
    case familyOopOutNetwork
    case coInsuranceInNetwork
    case coInsuranceOutNetwork
    case coPaymentOutNetwork
    case coPaymentInNetwork
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.CoverageSummary.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.CoverageSummary.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.CoverageSummary, b: InsuranceCardScan.CoverageSummary) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class CodableHelper {
  public static var dateFormatter: Foundation.DateFormatter {
    get
    set
  }
  public static var jsonDecoder: Foundation.JSONDecoder {
    get
    set
  }
  public static var jsonEncoder: Foundation.JSONEncoder {
    get
    set
  }
  open class func decode<T>(_ type: T.Type, from data: Foundation.Data) -> Swift.Result<T, any Swift.Error> where T : Swift.Decodable
  open class func encode<T>(_ value: T) -> Swift.Result<Foundation.Data, any Swift.Error> where T : Swift.Encodable
  @objc deinit
}
public struct ScanMetadataVideoTrack : Swift.Codable, Swift.Hashable {
  public var aspectRatio: Swift.Double?
  public var deviceId: Swift.String?
  public var frameRate: Swift.Double?
  public var groupId: Swift.String?
  public var height: Swift.Int?
  public var resizeMode: Swift.String?
  public var width: Swift.Int?
  public init(aspectRatio: Swift.Double? = nil, deviceId: Swift.String? = nil, frameRate: Swift.Double? = nil, groupId: Swift.String? = nil, height: Swift.Int? = nil, resizeMode: Swift.String? = nil, width: Swift.Int? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case aspectRatio
    case deviceId
    case frameRate
    case groupId
    case height
    case resizeMode
    case width
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.ScanMetadataVideoTrack.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.ScanMetadataVideoTrack.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.ScanMetadataVideoTrack, b: InsuranceCardScan.ScanMetadataVideoTrack) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct UploadParameters : Swift.Codable, Swift.Hashable {
  public var contentType: Swift.String
  public var contentDisposition: Swift.String
  public var xAmzMetaCardscanAccountId: Swift.String
  public var xAmzMetaCardscanCardId: Swift.String
  public var xAmzMetaCardscanScanId: Swift.String
  public var xAmzMetaCardscanUserId: Swift.String?
  public var xAmzMetaCardscanDeveloperUserId: Swift.String?
  public var key: Swift.String
  public var xAmzAlgorithm: Swift.String
  public var xAmzCredential: Swift.String
  public var xAmzDate: Swift.String
  public var xAmzSecurityToken: Swift.String
  public var policy: Swift.String
  public var xAmzSignature: Swift.String
  public init(contentType: Swift.String, contentDisposition: Swift.String, xAmzMetaCardscanAccountId: Swift.String, xAmzMetaCardscanCardId: Swift.String, xAmzMetaCardscanScanId: Swift.String, xAmzMetaCardscanUserId: Swift.String? = nil, xAmzMetaCardscanDeveloperUserId: Swift.String? = nil, key: Swift.String, xAmzAlgorithm: Swift.String, xAmzCredential: Swift.String, xAmzDate: Swift.String, xAmzSecurityToken: Swift.String, policy: Swift.String, xAmzSignature: Swift.String)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case contentType
    case contentDisposition
    case xAmzMetaCardscanAccountId
    case xAmzMetaCardscanCardId
    case xAmzMetaCardscanScanId
    case xAmzMetaCardscanUserId
    case xAmzMetaCardscanDeveloperUserId
    case key
    case xAmzAlgorithm
    case xAmzCredential
    case xAmzDate
    case xAmzSecurityToken
    case policy
    case xAmzSignature
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.UploadParameters.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.UploadParameters.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.UploadParameters, b: InsuranceCardScan.UploadParameters) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public enum CopayCategory : Swift.String, Swift.Codable, Swift.CaseIterable {
  case copay
  case coinsurance
  case deductible
  case outOfPocketMax
  case other
  public init?(rawValue: Swift.String)
  public typealias AllCases = [InsuranceCardScan.CopayCategory]
  public typealias RawValue = Swift.String
  public static var allCases: [InsuranceCardScan.CopayCategory] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct GetAccessToken500Response : Swift.Codable, Swift.Hashable {
  public var message: Swift.String?
  public init(message: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case message
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.GetAccessToken500Response.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.GetAccessToken500Response.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.GetAccessToken500Response, b: InsuranceCardScan.GetAccessToken500Response) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct CreateCardRequestBackside : Swift.Codable, Swift.Hashable {
  public enum Scanning : Swift.String, Swift.Codable, Swift.CaseIterable {
    case _required
    case _optional
    case disabled
    public init?(rawValue: Swift.String)
    public typealias AllCases = [InsuranceCardScan.CreateCardRequestBackside.Scanning]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.CreateCardRequestBackside.Scanning] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var scanning: InsuranceCardScan.CreateCardRequestBackside.Scanning?
  public init(scanning: InsuranceCardScan.CreateCardRequestBackside.Scanning? = .disabled)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case scanning
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.CreateCardRequestBackside.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.CreateCardRequestBackside.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.CreateCardRequestBackside, b: InsuranceCardScan.CreateCardRequestBackside) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public enum EligibilityState : Swift.String, Swift.Codable, Swift.CaseIterable {
  case processing
  case completed
  case error
  public init?(rawValue: Swift.String)
  public typealias AllCases = [InsuranceCardScan.EligibilityState]
  public typealias RawValue = Swift.String
  public static var allCases: [InsuranceCardScan.EligibilityState] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct ScanMetadataCameraCapabilitiesAspectRatio : Swift.Codable, Swift.Hashable {
  public var max: Swift.Double?
  public var min: Swift.Double?
  public init(max: Swift.Double? = nil, min: Swift.Double? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case max
    case min
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InsuranceCardScan.ScanMetadataCameraCapabilitiesAspectRatio.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InsuranceCardScan.ScanMetadataCameraCapabilitiesAspectRatio.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InsuranceCardScan.ScanMetadataCameraCapabilitiesAspectRatio, b: InsuranceCardScan.ScanMetadataCameraCapabilitiesAspectRatio) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
extension Swift.String : Swift.CodingKey {
  public var stringValue: Swift.String {
    get
  }
  public init?(stringValue: Swift.String)
  public var intValue: Swift.Int? {
    get
  }
  public init?(intValue: Swift.Int)
}
extension Swift.KeyedEncodingContainerProtocol {
  public mutating func encodeArray<T>(_ values: [T], forKey key: Self.Key) throws where T : Swift.Encodable
  public mutating func encodeArrayIfPresent<T>(_ values: [T]?, forKey key: Self.Key) throws where T : Swift.Encodable
  public mutating func encodeMap<T>(_ pairs: [Self.Key : T]) throws where T : Swift.Encodable, Self.Key : Swift.Hashable
  public mutating func encodeMapIfPresent<T>(_ pairs: [Self.Key : T]?) throws where T : Swift.Encodable, Self.Key : Swift.Hashable
  public mutating func encode(_ value: Foundation.Decimal, forKey key: Self.Key) throws
  public mutating func encodeIfPresent(_ value: Foundation.Decimal?, forKey key: Self.Key) throws
}
extension Swift.KeyedDecodingContainerProtocol {
  public func decodeArray<T>(_ type: T.Type, forKey key: Self.Key) throws -> [T] where T : Swift.Decodable
  public func decodeArrayIfPresent<T>(_ type: T.Type, forKey key: Self.Key) throws -> [T]? where T : Swift.Decodable
  public func decodeMap<T>(_ type: T.Type, excludedKeys: Swift.Set<Self.Key>) throws -> [Self.Key : T] where T : Swift.Decodable, Self.Key : Swift.Hashable
  public func decode(_ type: Foundation.Decimal.Type, forKey key: Self.Key) throws -> Foundation.Decimal
  public func decodeIfPresent(_ type: Foundation.Decimal.Type, forKey key: Self.Key) throws -> Foundation.Decimal?
}
extension InsuranceCardScan.ScanMetadataCaptureScore.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.ScanMetadataCaptureScore.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.ScanMetadataCaptureScore.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.ScanMetadataCaptureCanvas.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.ScanMetadataCaptureCanvas.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.ScanMetadataCaptureCanvas.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.AddressResultInner.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.AddressResultInner.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.AddressResultInner.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.ValidateMagicLink200Response.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.ValidateMagicLink200Response.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.ValidateMagicLink200Response.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.WebhookEligibilityCompletedEvent.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.WebhookEligibilityCompletedEvent.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.WebhookEligibilityCompletedEvent.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.EligibilitySummarizedResponse.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.EligibilitySummarizedResponse.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.EligibilitySummarizedResponse.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.EligibilityInfo.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.EligibilityInfo.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.EligibilityInfo.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.PhoneNumberType : Swift.Equatable {}
extension InsuranceCardScan.PhoneNumberType : Swift.Hashable {}
extension InsuranceCardScan.PhoneNumberType : Swift.RawRepresentable {}
extension InsuranceCardScan.Service.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.Service.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.Service.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.ProviderDto.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.ProviderDto.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.ProviderDto.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.StringValidationErrorKind : Swift.Equatable {}
extension InsuranceCardScan.StringValidationErrorKind : Swift.Hashable {}
extension InsuranceCardScan.NumericValidationErrorKind : Swift.Equatable {}
extension InsuranceCardScan.NumericValidationErrorKind : Swift.Hashable {}
extension InsuranceCardScan.CreateCardRequest.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.CreateCardRequest.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.CreateCardRequest.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.CardApiResponseDetails.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.CardApiResponseDetails.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.CardApiResponseDetails.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.WebhookCardCompletedEventConfiguration.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.WebhookCardCompletedEventConfiguration.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.WebhookCardCompletedEventConfiguration.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.CardApiResponse.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.CardApiResponse.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.CardApiResponse.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.WebhookCardErrorEventError.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.WebhookCardErrorEventError.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.WebhookCardErrorEventError.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.HTTPMethod : Swift.Equatable {}
extension InsuranceCardScan.HTTPMethod : Swift.Hashable {}
extension InsuranceCardScan.HTTPMethod : Swift.RawRepresentable {}
extension InsuranceCardScan.ListEligibility200Response.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.ListEligibility200Response.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.ListEligibility200Response.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.SubscriberDetails.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.SubscriberDetails.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.SubscriberDetails.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.GenerateMagicLink200Response.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.GenerateMagicLink200Response.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.GenerateMagicLink200Response.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.OOP.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.OOP.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.OOP.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.EligibilityApiResponseError.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.EligibilityApiResponseError.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.EligibilityApiResponseError.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.WebhookEligibilityDeletedEvent.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.WebhookEligibilityDeletedEvent.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.WebhookEligibilityDeletedEvent.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.DirectUpload200ResponseMetadata.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.DirectUpload200ResponseMetadata.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.DirectUpload200ResponseMetadata.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.CopayDeductibleService : Swift.Equatable {}
extension InsuranceCardScan.CopayDeductibleService : Swift.Hashable {}
extension InsuranceCardScan.CopayDeductibleService : Swift.RawRepresentable {}
extension InsuranceCardScan.WebhookEligibilityErrorEvent.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.WebhookEligibilityErrorEvent.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.WebhookEligibilityErrorEvent.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.LogLevel : Swift.Equatable {}
extension InsuranceCardScan.LogLevel : Swift.Hashable {}
extension InsuranceCardScan.LogLevel : Swift.RawRepresentable {}
extension InsuranceCardScan.CameraPosition : Swift.Equatable {}
extension InsuranceCardScan.CameraPosition : Swift.Hashable {}
extension InsuranceCardScan.DirectUpload200Response.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.DirectUpload200Response.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.DirectUpload200Response.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.EligibilityApiResponseEligibilityRequest.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.EligibilityApiResponseEligibilityRequest.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.EligibilityApiResponseEligibilityRequest.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.GenerateCardUploadUrl200Response.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.GenerateCardUploadUrl200Response.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.GenerateCardUploadUrl200Response.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.PhoneNumberResultInner.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.PhoneNumberResultInner.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.PhoneNumberResultInner.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.ScanMetadataWindowInner.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.ScanMetadataWindowInner.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.ScanMetadataWindowInner.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.WebsocketError.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.WebsocketError.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.WebsocketError.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.EligibilityApiResponseEligibilityRequestProvider.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.EligibilityApiResponseEligibilityRequestProvider.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.EligibilityApiResponseEligibilityRequestProvider.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.WebhookEligibilityErrorEventError.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.WebhookEligibilityErrorEventError.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.WebhookEligibilityErrorEventError.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.CoInsurance.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.CoInsurance.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.CoInsurance.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.WebhookCardDeletedEvent.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.WebhookCardDeletedEvent.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.WebhookCardDeletedEvent.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.SearchCards200Response.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.SearchCards200Response.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.SearchCards200Response.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.ApiErrorResponse.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.ApiErrorResponse.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.ApiErrorResponse.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.Address.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.Address.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.Address.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.WebhookCardCompletedEvent.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.WebhookCardCompletedEvent.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.WebhookCardCompletedEvent.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.GenerateCardUploadUrlRequest.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.GenerateCardUploadUrlRequest.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.GenerateCardUploadUrlRequest.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.PayerMatch.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.PayerMatch.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.PayerMatch.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.CoPayment.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.CoPayment.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.CoPayment.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.ScanOrientation : Swift.Equatable {}
extension InsuranceCardScan.ScanOrientation : Swift.Hashable {}
extension InsuranceCardScan.ScanOrientation : Swift.RawRepresentable {}
extension InsuranceCardScan.CreateEligibilityRequest.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.CreateEligibilityRequest.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.CreateEligibilityRequest.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.EligibilityRequestError : Swift.Equatable {}
extension InsuranceCardScan.EligibilityRequestError : Swift.Hashable {}
extension InsuranceCardScan.EligibilityWebsocketEvent.ModelType : Swift.Equatable {}
extension InsuranceCardScan.EligibilityWebsocketEvent.ModelType : Swift.Hashable {}
extension InsuranceCardScan.EligibilityWebsocketEvent.ModelType : Swift.RawRepresentable {}
extension InsuranceCardScan.EligibilityWebsocketEvent.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.EligibilityWebsocketEvent.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.EligibilityWebsocketEvent.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.SubscriberDto.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.SubscriberDto.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.SubscriberDto.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.ScanMetadataVideoBackground.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.ScanMetadataVideoBackground.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.ScanMetadataVideoBackground.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.ResponseMetadata.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.ResponseMetadata.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.ResponseMetadata.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.ScanMetadataGuides.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.ScanMetadataGuides.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.ScanMetadataGuides.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.CustomPayerRecord.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.CustomPayerRecord.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.CustomPayerRecord.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.AddressType : Swift.Equatable {}
extension InsuranceCardScan.AddressType : Swift.Hashable {}
extension InsuranceCardScan.AddressType : Swift.RawRepresentable {}
extension InsuranceCardScan.CHCPayerRecord.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.CHCPayerRecord.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.CHCPayerRecord.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.CardState : Swift.Equatable {}
extension InsuranceCardScan.CardState : Swift.Hashable {}
extension InsuranceCardScan.CardState : Swift.RawRepresentable {}
extension InsuranceCardScan.CardApiResponseImagesFront.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.CardApiResponseImagesFront.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.CardApiResponseImagesFront.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.WebhookEligibilityCreatedEvent.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.WebhookEligibilityCreatedEvent.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.WebhookEligibilityCreatedEvent.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.CardApiResponseImagesBack.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.CardApiResponseImagesBack.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.CardApiResponseImagesBack.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.ScanMetadataCaptureScoreScoresInner.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.ScanMetadataCaptureScoreScoresInner.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.ScanMetadataCaptureScoreScoresInner.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.ScanCaptureType : Swift.Equatable {}
extension InsuranceCardScan.ScanCaptureType : Swift.Hashable {}
extension InsuranceCardScan.ScanCaptureType : Swift.RawRepresentable {}
extension InsuranceCardScan.ModelError.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.ModelError.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.ModelError.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.Deductible.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.Deductible.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.Deductible.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.CardPerformance200Response.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.CardPerformance200Response.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.CardPerformance200Response.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.EligibilityApiResponse.State : Swift.Equatable {}
extension InsuranceCardScan.EligibilityApiResponse.State : Swift.Hashable {}
extension InsuranceCardScan.EligibilityApiResponse.State : Swift.RawRepresentable {}
extension InsuranceCardScan.EligibilityApiResponse.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.EligibilityApiResponse.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.EligibilityApiResponse.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.CardWebsocketEvent.ModelType : Swift.Equatable {}
extension InsuranceCardScan.CardWebsocketEvent.ModelType : Swift.Hashable {}
extension InsuranceCardScan.CardWebsocketEvent.ModelType : Swift.RawRepresentable {}
extension InsuranceCardScan.CardWebsocketEvent.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.CardWebsocketEvent.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.CardWebsocketEvent.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.EligibilityError.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.EligibilityError.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.EligibilityError.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.PayerDetails.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.PayerDetails.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.PayerDetails.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.CopayResultInner.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.CopayResultInner.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.CopayResultInner.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.CardApiResponseImages.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.CardApiResponseImages.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.CardApiResponseImages.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.CardResponseMetadata.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.CardResponseMetadata.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.CardResponseMetadata.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.PlanDetails.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.PlanDetails.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.PlanDetails.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.EligibilityApiResponseEligibilityRequestSubscriber.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.EligibilityApiResponseEligibilityRequestSubscriber.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.EligibilityApiResponseEligibilityRequestSubscriber.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.WebhookCardCreatedEvent.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.WebhookCardCreatedEvent.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.WebhookCardCreatedEvent.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.WebhookCardErrorEvent.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.WebhookCardErrorEvent.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.WebhookCardErrorEvent.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.ScanMetadata.CaptureType : Swift.Equatable {}
extension InsuranceCardScan.ScanMetadata.CaptureType : Swift.Hashable {}
extension InsuranceCardScan.ScanMetadata.CaptureType : Swift.RawRepresentable {}
extension InsuranceCardScan.ScanMetadata.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.ScanMetadata.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.ScanMetadata.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.DownloadException : Swift.Equatable {}
extension InsuranceCardScan.DownloadException : Swift.Hashable {}
extension InsuranceCardScan.GetAccessToken200Response.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.GetAccessToken200Response.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.GetAccessToken200Response.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.MatchScore.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.MatchScore.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.MatchScore.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.ScanMetadataCameraCapabilities.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.ScanMetadataCameraCapabilities.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.ScanMetadataCameraCapabilities.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.CoverageSummary.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.CoverageSummary.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.CoverageSummary.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.ScanMetadataVideoTrack.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.ScanMetadataVideoTrack.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.ScanMetadataVideoTrack.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.UploadParameters.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.UploadParameters.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.UploadParameters.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.CopayCategory : Swift.Equatable {}
extension InsuranceCardScan.CopayCategory : Swift.Hashable {}
extension InsuranceCardScan.CopayCategory : Swift.RawRepresentable {}
extension InsuranceCardScan.GetAccessToken500Response.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.GetAccessToken500Response.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.GetAccessToken500Response.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.CreateCardRequestBackside.Scanning : Swift.Equatable {}
extension InsuranceCardScan.CreateCardRequestBackside.Scanning : Swift.Hashable {}
extension InsuranceCardScan.CreateCardRequestBackside.Scanning : Swift.RawRepresentable {}
extension InsuranceCardScan.CreateCardRequestBackside.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.CreateCardRequestBackside.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.CreateCardRequestBackside.CodingKeys : Swift.RawRepresentable {}
extension InsuranceCardScan.EligibilityState : Swift.Equatable {}
extension InsuranceCardScan.EligibilityState : Swift.Hashable {}
extension InsuranceCardScan.EligibilityState : Swift.RawRepresentable {}
extension InsuranceCardScan.ScanMetadataCameraCapabilitiesAspectRatio.CodingKeys : Swift.Equatable {}
extension InsuranceCardScan.ScanMetadataCameraCapabilitiesAspectRatio.CodingKeys : Swift.Hashable {}
extension InsuranceCardScan.ScanMetadataCameraCapabilitiesAspectRatio.CodingKeys : Swift.RawRepresentable {}
