// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios15.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name InsuranceCardScan
@_exported import CardScanClient
import Foundation
@_exported import InsuranceCardScan
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public typealias InsuranceCard = CardScanClient.CardApiResponse
public func getBridgeDecoder() -> Foundation.JSONDecoder
public struct CardScanConfig {
  public init(sessionToken: Swift.String, live: Swift.Bool, onSuccess: @escaping (InsuranceCardScan.InsuranceCard) -> Swift.Void, eligibility: InsuranceCardScan.EligibilityRequest? = nil, messages: [Swift.String : Swift.String]? = nil, messageStyle: InsuranceCardScan.MessageStyle? = nil, autoSwitchActiveColor: UIKit.UIColor? = nil, autoSwitchInactiveColor: UIKit.UIColor? = nil, progressBarColor: UIKit.UIColor? = nil, widgetBackgroundColor: UIKit.UIColor? = nil, onCancel: (() -> Swift.Void)? = nil, onError: ((InsuranceCardScan.CardScanError) -> Swift.Void)? = nil, onProgress: ((Swift.Double) -> Swift.Void)? = nil, onEligibilitySuccess: ((InsuranceCardScan.Eligibility) -> Swift.Void)? = nil, onEligibilityError: ((InsuranceCardScan.CardScanError) -> Swift.Void)? = nil, backsideSupport: Swift.Bool? = nil, onRetry: (() -> Swift.Void)? = nil, cameraOptions: InsuranceCardScan.CameraOptions? = nil, logging: InsuranceCardScan.LogLevel? = nil, inspectable: Swift.Bool? = false)
}
public enum LogLevel : Swift.String, Swift.Codable {
  case off, normal, verbose, detector, everything
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public let messageKeys: Swift.Set<Swift.String>
public struct MessageStyle {
  public init(fontSize: Swift.Double, textColor: UIKit.UIColor, backgroundColor: UIKit.UIColor)
}
public enum CameraPosition {
  case front
  case back
  case unspecified
  public static func == (a: InsuranceCardScan.CameraPosition, b: InsuranceCardScan.CameraPosition) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct CameraOptions : Swift.Codable {
  public init(flipHorizontal: Swift.Bool? = false, flipVertical: Swift.Bool? = false)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class CardScanViewController : UIKit.UIViewController, WebKit.WKNavigationDelegate, WebKit.WKUIDelegate {
  @_Concurrency.MainActor(unsafe) public var config: InsuranceCardScan.CardScanConfig?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func loadView()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, requestMediaCapturePermissionFor origin: WebKit.WKSecurityOrigin, initiatedByFrame frame: WebKit.WKFrameInfo, type: WebKit.WKMediaCaptureType, decisionHandler: @escaping (WebKit.WKPermissionDecision) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension InsuranceCardScan.CardScanViewController : WebKit.WKScriptMessageHandler {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
}
public struct EligibilityRequest : Swift.Codable {
  public var provider: CardScanClient.ProviderDto
  public var subscriber: CardScanClient.SubscriberDto
  public init(provider: CardScanClient.ProviderDto, subscriber: CardScanClient.SubscriberDto) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum EligibilityRequestError : Swift.Error, Foundation.LocalizedError {
  case invalidNPI
  case invalidDateOfBirth
  public var errorDescription: Swift.String? {
    get
  }
  public static func == (a: InsuranceCardScan.EligibilityRequestError, b: InsuranceCardScan.EligibilityRequestError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public typealias Eligibility = CardScanClient.EligibilityApiResponse
public struct CardScanError : Swift.Codable, Swift.Error {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension InsuranceCardScan.LogLevel : Swift.Equatable {}
extension InsuranceCardScan.LogLevel : Swift.Hashable {}
extension InsuranceCardScan.LogLevel : Swift.RawRepresentable {}
extension InsuranceCardScan.CameraPosition : Swift.Equatable {}
extension InsuranceCardScan.CameraPosition : Swift.Hashable {}
extension InsuranceCardScan.EligibilityRequestError : Swift.Equatable {}
extension InsuranceCardScan.EligibilityRequestError : Swift.Hashable {}
